Installation des machines virtuelles Debian et Ubuntu
  - Utilisation du module noyau Linux KVM avec l'émulateur QEMU pour un parc de 300 VM environ
  - Utilisation de l'API opensource Libvirt (démon libvirt-bin) pour l'intéraction avec KVM/QEMU 
  - Dumping et stats des VM avec l'outil virsh
  - Installation en PXE
  - Utilisation de VirtualBox (pour mes projets perso) 
Configuration et déploiment des machines physiques/virtuelles
  - Utilisation de l'outil opensource PUPPET pour préparer les recettes des différents équipements applicatifs
H.A (High Availability)
Préparation des clusters contenants des machines physiqques et virtuelles avec HeartBeat/PaceMaker et des volumes de stockage à répliquer avec DRBD et LVM
Mise en place des volumes RAID 1/5/10 pour réplications des disques
Recompilation du noyau linux
Packaging Debian
  - debhelper, dh et cdbs
  - utilisation de quilt pour les patchs des paquets sources
  - utilisation de reprepro pour mise en place des dépôts Debian locaux suivant les différentes versions utilisées (Lenny, Squeeze, Wheezy, Sid et Jessie)
Monitoring et Supervision
 - démon monitd pour le monitoring des services applicatifs (apache, opensips, amq, ...)
 - Utilisation et configuration du serveur web Apache2 pour Cacti
 - supervision avec shinken
 - Graphing : Cacti avec RRDtool et utilisation de Collectd (avec SNMP pour la collecte des infos des usages des CPU, charge des machines, état de la mémoire,etc) et des plugins JMX pour exposer des stats sur les JVM (taille de la Heap, Survivors, Young Generation et du nombre des Garbage Collections). Ces informations seront stockées dans fichiers RRD (RRdTool) et communiqués à Cacti pour les grapher. 
SGBD
 - Postgresql et Mysql
 - Réplication : mise en place d’un système de réplication asynchrone Master-Multislaves pour PostgreSQL avec Slony-I
 - NoSQL : MongoDB pour des tests de scalabilté
Développement (Java) des SVI (Serveur Vocal Intéractif) et des AGI (Asterisk Gateway Interface) et des scripts pour manipuler les services offerts par la plaque VOIP (Ruby)
Utilisation d'ActiveMQ qui implémente le service JMS (Java Message Service) avec Protobuf (Protocol Buffer) pour le transfert des messages entre les différents équipements applicatifs
Correction des bugs et maintenance
Documentation technique
