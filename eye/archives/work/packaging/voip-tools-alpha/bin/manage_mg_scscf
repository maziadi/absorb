#!/usr/bin/env ruby

require 'rubygems'
require 'sequel'
require 'resolv'
require 'bundler'
ENV["BUNDLE_PATH"] = "/usr/lib/ruby/1.8/voip-tools/bundle"
ENV["BUNDLE_DISABLE_SHARED_GEMS"] = "1"
ENV["BUNDLE_GEMFILE"] = "/usr/lib/ruby/1.8/voip-tools/Gemfile"
Bundler.setup
require 'log4r'
require 'log4r/outputter/syslogoutputter'
begin
  require 'cmdparse2'
rescue LoadError => detail
  require 'cmdparse'
end

Logger = Log4r::Logger.new('manage_mg')
format = Log4r::PatternFormatter.new(:pattern => "%l: %m")

console_stdout = Log4r::StdoutOutputter.new('manage_mg')
console_stdout.only_at Log4r::INFO
console_stdout.formatter = format

console_stderr = Log4r::StderrOutputter.new('manage_mg')
console_stderr.only_at Log4r::WARN,Log4r::ERROR,Log4r::FATAL
console_stderr.formatter = format

syslog = Log4r::SyslogOutputter.new('manage_mg')
syslog.formatter = format

Logger.add(console_stdout)
Logger.add(console_stderr)
Logger.add(syslog)

Logger.level = Log4r::INFO

CONF = "/etc/voip-tools.yaml"

DATABASE_INFOS = YAML.load(File.read(CONF))[:database]
  
def commons_opt(cmd)
  cmd.options = CmdParse::OptionParserWrapper.new do |opt|
    opt.on("-n", "--dry-run", "Simulate the action without changing anything") {|t| $dryrun = true }
    opt.on("-i", "--include-mg MEDIA_GROUP_ID",  "Include a list of Media Groups") {|t| $include = t }
    opt.on("-e", "--exclude-mg MEDIA_GROUP_ID",  "Exclude a list of Media Groups") {|t| $exclude = t }
  end
end

def manage_media_group (hosts, status)
  hosts.each do |row| 
    begin
      request = DB[:trunk_group].filter("host = '#{row}.sip.openvno.net:5060'").or("host LIKE '#{row}-c_.sip.openvno.net:5060'")
      if $include
        request = request.filter(:id => $include.split(',').map(&:to_i))
      end
      if $exclude
        request = request.exclude(:id => $exclude.split(',').map(&:to_i))
      end
      request = request.prepare(:update, :update_trunk_groups, :enabled => status)
      Logger.debug(request.inspect)
      if $dryrun
        Logger.info("DRY_RUN MODE : " + request.inspect)
      else
        result = request.call
        Logger.debug("Nombre de lignes modifiees = #{result}")
      end
    rescue Sequel::DatabaseError => e
      Logger.error("SEQUEL: #{e.message}")
      exit(1)
    end
  end
end

#
# MAIN
#

DB = Sequel.connect(DATABASE_INFOS)

cmd = CmdParse::CommandParser.new(true, true)
cmd.program_name = "manage_mg"
cmd.program_version = [0, 0, 1]

cmd.options = CmdParse::OptionParserWrapper.new do |opt|
  opt.separator "Global options:"
  opt.on("-v", "--verbose", "Be verbose when outputting info") {|t| $verbose = true }
  opt.on("-d", "--debug", "Change the log level to debug") {|t| $debug = true }
end

cmd.add_command(CmdParse::HelpCommand::new, false)
cmd.add_command(CmdParse::VersionCommand.new)

activate = CmdParse::Command::new('activate', false)
activate.short_desc = "activate an host or a list of hosts"
activate.description = "Activate an host or a list of hosts by changing the value of activated to 1 in the trunk_group table"
commons_opt(activate)
activate.set_execution_block do |args|
  Logger.level = Log4r::DEBUG if $debug
  $hosts = []
  $hosts = args.map { |t| t.split(",")}.flatten
  if $verbose
    Logger.info("List of gateway(s) going to be UP : #{args.join(', ')}")
  else
    Logger.debug("List of gateway(s) going to be UP : #{args.join(', ')}")
  end
  begin
    manage_media_group($hosts, 1)
  rescue StandardError => e
    Logger.error("#{e.message}")
    exit(1)
  end
  Logger.info("DONE")
end

deactivate = CmdParse::Command::new('deactivate', false)
deactivate.short_desc = "deactivate an host or a list of hosts"
deactivate.description = "Deactivate an host or a list of hosts by changing the value of activated to 0 in the trunk_group table"
commons_opt(deactivate)
deactivate.set_execution_block do |args|
  Logger.level = Log4r::DEBUG if $debug
  $hosts = []
  $hosts = args.map { |t| t.split(",")}.flatten
  if $verbose
    Logger.info("List of gateway(s) going to be DOWN : #{args.join(', ')}")
  else
    Logger.debug("List of gateway(s) going to be DOWN : #{args.join(', ')}")
  end
  begin
    manage_media_group($hosts, 0)
  rescue StandardError => e
    Logger.error("#{e.message}")
    exit(1)
  end
  Logger.info("DONE")
end

cmd.add_command(activate)
cmd.add_command(deactivate)

cmd.parse
