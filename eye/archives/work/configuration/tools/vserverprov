#!/usr/bin/env ruby

require 'rubygems'
begin
    require 'cmdparse2'
rescue LoadError => detail
    require 'cmdparse'
end
require 'tools/vserver/vserver'


cmd = CmdParse::CommandParser.new(true,true)
cmd.program_name = "vserverprov"
cmd.add_command( CmdParse::HelpCommand.new )
cmd.add_command( CmdParse::VersionCommand.new )
cmd.options = CmdParse::OptionParserWrapper.new do |opt|
  opt.separator "Global options:"
  opt.on( '-h', '--hostname <HOSTNAME>','Specifie hostname' )       { |hostname| $hostname = hostname }
  opt.on( '-c', '--cluster <CLUSTER>',  'Specifie cluster name' )   { |cluster| $cluster = cluster }
end

# add vserver
add = CmdParse::Command.new( 'add', false )
add.short_desc = "add vserver (config file, disk space)"
add.options = CmdParse::OptionParserWrapper.new do |opt|
  opt.separator "add options:"
  opt.on( '-b', '--bridge <BRIDGE>',  'Specifie bridge to use' )  { |bridge| $bridges << bridge }
  opt.on( '-c', '--cpu <CPU>',          'Specifie number of cpu (default 1)' )          { |cpu| $cpu = cpu }
  opt.on( '-f', '--file',               'Create image file' )                           { $file = true }
  opt.on( '-m', '--memory <MEM>',       'Specifie memory size with unit (ex 512M)' )    { |memory_size| $memory_size = memory_size }
  opt.on( '-s', '--system <SYS>',       'Specifie system size with unit (ex 20G' )      { |system_size| $system_size = system_size }
  opt.on( '--windows',  'Install a windows host' )  { $windows = true }
end

$bridges = []
$distrib = "lenny"
$arch = "i386"
$cpu = "1" if $cpu.nil?


add.set_execution_block do |args|
  error = "\n\nSome options are mandatory"
  error += "\n\t-b or --bridges" if $bridges.empty?
  error += "\n\t-m or --memory_size" if $memory_size.nil?
  error += "\n\t-s or --system_size" if $system_size.nil?
  raise CmdParse::InvalidArgumentError,error if $bridges.nil? or $memory_size.nil? or $system_size.nil?
  vserver = Vserver::new  :hostname    => $hostname,
                          :cluster     => $cluster,
                          :bridges     => $bridges, 
                          :cpu         => $cpu, 
                          :memory_size => $memory_size, 
                          :system_size => $system_size, 
                          :file        => $file,
                          :windows     => $windows
  vserver.add_vserver
end

# update_conf vserver
updateconf = CmdParse::Command.new( 'update-config', false )
updateconf.short_desc = "Update configurations files on directory configuration"
updateconf.set_execution_block do |args|
  vserver = Vserver::new :cluster => $cluster
  vserver.update_config
end

# update_conf vserver
puppetize = CmdParse::Command.new( 'puppetize', false )
puppetize.short_desc = "Update configurations files on directory configuration"
puppetize.set_execution_block do |args|
  vserver = Vserver::new :cluster => $cluster
  vserver.puppetize
end

# add cluster directories
initialize = CmdParse::Command.new( 'initialize', false )
initialize.short_desc = "Initialize cluster directory in configuration"
initialize.set_execution_block do |args|
  vserver = Vserver::new :cluster => $cluster
  vserver.initialize_cluster
end

# add cluster directories
used_mac_addr = CmdParse::Command.new( 'find_mac_addr', false )
used_mac_addr.short_desc = "used_mac_addr in all clusters in configuration"
used_mac_addr.set_execution_block do |args|
  vserver = Vserver::new 
  mac = vserver.free_mac_addr
  puts mac 
end

# delete vserver
delete = CmdParse::Command.new( 'delete', false )
delete.short_desc = "delete vserver (config file, data)"
delete.set_execution_block do |args|
  vserver = Vserver::new :hostname => $hostname, :cluster => $cluster
  vserver.delete_vserver
end

rebuild_all = CmdParse::Command.new( 'rebuild_all', false )
rebuild_all.short_desc = "Rebuild all logicals volumes and drbd on cluster member"
rebuild_all.set_execution_block do |args|
  vserver = Vserver::new :hostname => $hostname, :cluster => $cluster
  vserver.rebuild_all
end

build_dir = CmdParse::Command.new( 'build_dir', false )
build_dir.short_desc = "build drbd volume"
build_dir.options = CmdParse::OptionParserWrapper.new do |opt|
  opt.separator "build_dir options:"
  opt.on( '-v', '--volume <NAME>', 'Specifie directory name') { |volume| $volume = volume }
  opt.on( '-s', '--size <SIZE>',   'Specifie directory size with unit (ex 20G )') { |system_size| $system_size = system_size }
end

build_dir.set_execution_block do |args|
  vserver = Vserver::new :hostname => $volume, :cluster => $cluster, :system_size => $system_size
  vserver.create_volume
end

cmd.add_command(add)
cmd.add_command(delete)
cmd.add_command(updateconf)
cmd.add_command(initialize)
cmd.add_command(used_mac_addr)
cmd.add_command(puppetize)
cmd.add_command(build_dir)
cmd.add_command(rebuild_all)

cmd.parse
