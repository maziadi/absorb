# -*- text -*-
#
#  $Id$

#
#  The "linelog" module will log one line of text to a file.
#  Both the filename and the line of text are dynamically expanded.
#
#  We STRONGLY suggest that you do not use data from the
#  packet as part of the filename.
#
linelog {
  #
  #  The file where the logs will go.
  #
  #  If the filename is "syslog", then the log messages will
  #  go to syslog.
  filename = ${logdir}/linelog

  #
  #  The default format string.
  format = "This is a log message for %{User-Name}"

  #
  #  This next line can be omitted.  If it is omitted, then
  #  the log message is static, and is always given by "format",
  #  above.
  #
  #  If it is defined, then the string is dynamically expanded,
  #  and the result is used to find another configuration entry
  #  here, with the given name.  That name is then used as the
  #  format string.
  #
  #  If the configuration entry cannot be found, then no log
  #  message is printed.
  #
  #  i.e. You can have many log messages in one "linelog" module.
  #  If this two-step expansion did not exist, you would have
  #  needed to configure one "linelog" module for each log message.

  #
  #  Reference the Packet-Type (Access-Request, etc.)  If it doesn't
  #  exist, reference the "format" entry, above.
  #reference = "%{%{Packet-Type}:-format}"
  reference = "Accounting-Request.%{%{Acct-Status-Type}:-unknown}"

  #
  #  Followed by a series of log messages.
  Access-Request = "%S %{Packet-Type}: [%{User-Name}]"
  Access-Reject = "%S Rejected access: %{User-Name} %{Acct-Terminate-Cause}"
  Access-Challenge = "%S Sent challenge: %{User-Name}"

  #
  #  The log messages can be grouped into sections and
        #  sub-sections, too.  The "reference" item needs to have a "."
  #  for every section.  e.g. reference = foo.bar will reference
  #  the "foo" section, "bar" configuration item.
  #

  #
  #  Used if: reference = "foo.bar".
  foo {
      bar = "Example log.  Please ignore"
  }

  #
  #  Another example:
  #      reference = "Accounting-Request.%{%{Acct-Status-Type}:-unknown}"
  #
  Accounting-Request {
    Start = "%S [%{Acct-Unique-Session-Id}] Connect: [%{User-Name}] from NAS %C (%{NAS-IP-Address}, %{Called-Station-Id})\n%S [%{Acct-Unique-Session-Id}] Connect: [%{User-Name}] %{Cisco-AVPair} (client %{Calling-Station-Id} port %{NAS-Port})"
    Stop = "%S [%{Acct-Unique-Session-Id}] Disconnect: [%{User-Name}] from NAS %C (%{NAS-IP-Address}, %{Called-Station-Id})\n%S [%{Acct-Unique-Session-Id}] Disconnect: [%{User-Name}] %{Cisco-AVPair} (client %{Calling-Station-Id} port %{NAS-Port})\n%S [%{Acct-Unique-Session-Id}] Disconnect: [%{User-Name}] Session time: %{Acct-Session-Time} seconds"

    #  Don't log anything for these packets.
    Alive = ""

    Accounting-On = "%S NAS %C (%{NAS-IP-Address}) just came online"
    Accounting-Off = "%S NAS %C (%{NAS-IP-Address}) just went offline"

    Login = "login"
    Login-User = "login"

    # don't log anything for other Acct-Status-Types.
    unknown = ""
  }

}
