#!/bin/bash
#
#
# Author: Nicolas Hicher <n.hicher@alphalink.fr>
# Support:      support@alphalink.fr
# License:      GNU General Public License (GPL)
# Copyright:  (C) 2010 Alphalink

while getopts :h:s:d:t:m:n:pi opt
do
  case ${opt} in
    h) HOST=${OPTARG};;
    s) SWAP_SIZE=${OPTARG};;
    d) SYSTEM_SIZE=${OPTARG};;
    i) IMG="1";;
    t) TOTAL_SIZE=${OPTARG};;
    m) PHY_ONE=${OPTARG};;
    n) PHY_TWO=${OPTARG};;
    p) PARAVIRT="1";;
    '?')  echo "${0} : option ${OPTARG} is not valid" >&2
          exit -1
    ;;
  esac
done

# variables defaults definition
VG="data"
PARAVIRT="${PARAVIRT:-"0"}"
IMG="${IMG:-"0"}"

find_size_mb () {
  if (echo $SIZE | grep -qE "G")
  then
    SIZE=$(ruby -e "puts (\"$SIZE\".gsub(/G/, '\'''\'').to_f * 1024).to_i") 
  elif (echo $SIZE | grep -qE "M")
  then
    SIZE=$(echo $SIZE | sed s/M//)
  fi 
}

create_image_file () {
  NAME=$1
  SIZE=$2
  DIRECTORY="/data/images"
  find_size_mb $SIZE
  dd if=/dev/zero of=$DIRECTORY/$NAME.img bs=1M count=0 seek=$SIZE > 2&>1 > /dev/null
  echo "The file $DIRECTORY/$NAME.img is ready"
}

create_lv () {
  # test if the logical volume exist
  DEVICE=$1
  SIZE=$2
  lvs | grep $DEVICE
  if [[ $? -eq 0 ]]
  then
    echo "The device $DEVICE already exist"
    exit -1
  fi
  lvcreate -n $DEVICE -L $SIZE $VG
}

free_size () {
  TMP=$(echo $TOTAL_SIZE | grep -oE "[0-9]+")
  vg_free=$(vgs | grep $VG | awk '{print $7}' | grep -o '[0-9.]*')
  state=$(ruby -e "if $TMP < $vg_free ;puts 0; else puts 1; end")
  if [ $state -ne 0 ]
  then
    echo "no space left on device"
    exit -1
  fi
}

initialize_drbd () {
  IP_PHY_ONE=$(host -t a $PHY_ONE | awk '{print $3}')
  IP_PHY_TWO=$(host -t a $PHY_TWO | awk '{print $3}')
  DEVICE=$1
  DRBD='/etc/drbd.conf'
  DRBDADM="/sbin/drbdadm"
  # define ports to use for drbd. Initialize if empty
  ports=$(grep address $DRBD | grep -o '[0-9]\{4\}' | sort -u)
  if [[ -z $ports ]]
  then
    port='7789'
  else
    for port in $ports
    do
      port=$((port+1))
    done
  fi

  devices=$(grep -o '/dev/drbd[0-9]*' $DRBD | sed 's:/dev/drbd::' | sort -nu)
  if [[ -z  $devices ]]
  then
    device='/dev/drbd0'
  else
    for device in $devices
    do
      number=$(echo $device | grep -o '[0-9]*')
      device="/dev/drbd$((number+1))"
    done
  fi

  # Test if the device is already present in drbd.conf
  grep $DEVICE $DRBD
  if [ $? == 0 ]
  then
    echo "the device $DEVICE is already configured"
  else
    cat >> $DRBD << EOF
resource $DEVICE {

  on $PHY_ONE {
    device      $device;
    disk        /dev/$VG/$DEVICE;
    address     $IP_PHY_ONE:$port;
    meta-disk   internal;
  }
  on $PHY_TWO {
    device      $device;
    disk        /dev/$VG/$DEVICE;
    address     $IP_PHY_TWO:$port;
    meta-disk   internal;
  }
}

EOF
  fi
  #dd if=/dev/zero of=/dev/$VG/$DEVICE bs=1024 count=10
  drbdadm_commands="create-md attach syncer connect" 
  for command in $drbdadm_commands
  do
    $DRBDADM $command $DEVICE
  done
}


if [ $PARAVIRT -eq 1 ]
then
  SWAP_DEVICE="${HOST}-swap"
  SYSTEM_DEVICE="${HOST}-disk"
  if [ $IMG -eq 0 ]
  then
    # paravirt on lvm
    free_size
    create_lv $SWAP_DEVICE $SWAP_SIZE
    create_lv $SYSTEM_DEVICE $SYSTEM_SIZE
    for device in $SWAP_DEVICE $SYSTEM_DEVICE
    do
      initialize_drbd $device
    done
  elif [ $IMG -eq 1 ]
  then
    # paravirt on image file
    create_image_file $SWAP_DEVICE $SWAP_SIZE
    create_image_file $SYSTEM_DEVICE $SYSTEM_SIZE
  fi
elif [ $PARAVIRT -eq 0 ]
then
  DEVICE="${HOST}"
  if [ $IMG -eq 0 ]
  then
    #hvm on lvm
    free_size
    create_lv $DEVICE $TOTAL_SIZE
    initialize_drbd $DEVICE
  elif [ $IMG -eq 1 ]
  then
    # hvm on image file
    create_image_file $DEVICE $TOTAL_SIZE
  fi
fi

