#!/usr/bin/env ruby

def ethtool(dev)
  infos = `$(which ethtool) #{dev}`
  speed = infos[/Speed: (.*)/,1]
  duplex = infos[/Duplex: (.*)/,1]
  link = ( (true if infos[/Link detected: yes/] ) || false)
  return [speed,duplex,link]
end

#initialisation
list_eth = Array::new
list_bond = Array::new
status=0

#select all eth
ipl = `/bin/ip link show`.split("\n")
ipl.each{ |line|
  eth = line[/(eth[0-9]+):.*UP.*>/,1]
  bond = line[/(bond[0-9]+):.*UP.*>/,1]
  list_eth.push(eth) if !eth.nil?
  list_bond.push(bond) if !bond.nil?
}
list_bond.uniq!
list_eth.uniq!

list_bond.each do |device|
  #if there is a bond
  if File::file?("/proc/net/bonding/#{device}")

    #we create a empty bon
    bond = Hash::new
    bond_error=0

    #select eth in bond
    lines = File::new("/proc/net/bonding/#{device}","r").readlines
    lines.collect! { |line|
      eth=line[/Slave Interface: (.*)/,1]
      eth = "eth1"
      bond[eth]=nil if !eth.nil? and list_eth.include?(eth)
    }
  
    #check nego in bond
    bond.keys.each{|value|
      speed,duplex,link = ethtool(value)
      bond_error=1 if ( speed != "1000Mb/s" and speed != "100Mb/s" ) or duplex != "Full" or !link
      bond[value]=[speed,duplex,link]
    }
    
    #error in bond
    if bond.values.uniq.size<0 or bond_error==1
      status=1
      str = "KO: #{device}"
      bond.keys.each{|key|
        if bond[key].last
          str += ", #{key} is #{bond[key].first} #{bond[key][1]} "
        else
          str += ", #{key} no link detect "
        end
      }
      puts str
    end
  end
  list_eth=list_eth-bond.keys
end
#we check nego in eth list now
list_eth.each{|value|
  speed,duplex,link = ethtool(value)
  if link
    if ( speed != "1000Mb/s" and speed != "100Mb/s" ) or duplex != "Full"
      status = 1
      puts "KO: #{value} is #{speed} #{duplex}" 
    end
  else
    status = 1
    puts "KO: #{value} no link detect"
  end 
}
if status == 1
  exit 1
else
  puts "OK"
end
