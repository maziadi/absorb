#!/bin/bash

failed()
{
  echo "An error occurred" >&2
  exit 1
}

list_sets()
{
  grep set_id /etc/slony1/slon_tools.conf | sed -e 's/.*"set_id" => \([0-9]\+\),/\1/'
}

echo "Creating function to detect slaves and master"
/usr/bin/psql opensips postgres -c "CREATE OR REPLACE FUNCTION f_is_slave() RETURNS BOOLEAN AS \$\$ BEGIN RETURN (count(*) > 0) FROM _pgsql_cluster.sl_subscribe JOIN _pgsql_cluster.sl_node ON sub_receiver = no_id JOIN _pgsql_cluster.sl_local_node_id ON no_id = last_value; END \$\$ LANGUAGE plpgsql;" || failed

for s in $(list_sets); do
  echo "Subscribing to cluster for set $s"
  /usr/bin/slonik_subscribe_set $s 2|/usr/bin/slonik || failed
done
echo "Creating lock file"
mkdir -p /var/lock/slony1 || failed
touch /var/lock/slony1/opensips.lock || failed
chown -R opensips:opensips /var/lock/slony1 || failed

echo "Restarting slony1 with monit"
/usr/sbin/monit restart slony1_opensips || failed

echo "Disabling probing on gateways type 1"
locations=`psql -t -U postgres opensips -c "SELECT table_name from information_schema.tables where table_name ~ '(^([dD][0-9]+_loc|location)$)';"`
for l in $locations;do
  if [ $l == 'location' ]; then
    /usr/bin/psql opensips postgres -c "UPDATE dr_gateways SET probe_mode=0 WHERE type=1"
    echo "Reloading drouting"
    /usr/sbin/opensipsctl dr reload
  else
    vno_id=`echo $l|sed -r 's/([dD][0-9]{12})_loc/\1/'`
    /usr/bin/psql opensips postgres -c "UPDATE \"${vno_id}_dr_gw\" SET probe_mode=0 WHERE type=1"
    echo "Reloading drouting for ${vno_id}"
    /opt/local/bin/${vno_id}_opensipsctl dr reload
  fi
done

