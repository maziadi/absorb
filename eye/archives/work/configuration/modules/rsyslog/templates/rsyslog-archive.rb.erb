#!/usr/bin/env ruby
require 'open3'
require 'tempfile'
require 'cmdparse2'

$db_user = '<%= rsyslog_mysql_dbuser %>'
$db_password = '<%= rsyslog_mysql_password %>'
$db_name = 'SYSLOG'
$db_table = 'syslog'



def archive_last_day
  tmp = Tempfile::new("last_day")
  stdin, stdout, stderr = Open3::popen3("mk-archiver --source h=localhost,u=#{$db_user},p=#{$db_password},D=#{$db_name},t=#{$db_table} --file '#{tmp.path}' --nodelete --where \"DATE_FORMAT(receivedat,'%Y-%m-%d')=DATE_SUB(CURDATE(), INTERVAL 1 DAY )\" ")
  stdout.readlines
  err = stderr.readlines
  puts err.join("") if err.size >0
  stdin, stdout, stderr = Open3::popen3("gzip -c #{tmp.path} > /var/log/old/sql/archive_#{Time.now.strftime("%Y-%m-%d")}.syslog.gz")
  stdout.readlines
  err = stderr.readlines
  puts err.join("") if err.size >0
  tmp.close!
end
  
def clean(day)
  stdin, stdout, stderr = Open3::popen3("mk-archiver --source h=localhost,u=#{$db_user},p=#{$db_password},D=#{$db_name},t=#{$db_table} --purge --where \"DATE_SUB(CURDATE(),INTERVAL #{day} DAY)>DATE_FORMAT(receivedat,'%Y-%m-%d')\" --optimize s ")
  stdout.readlines
  err = stderr.readlines
  puts err.join("") if err.size >0
end




cmd = CmdParse::CommandParser.new(true,false)
cmd.program_name = "rsyslog-archive "
cmd.add_command(CmdParse::HelpCommand::new, false)


archive_day = CmdParse::Command.new( 'archive-day', false )
archive_day.short_desc = "archive-day"
archive_day.description = "Archive the last day"
archive_day.set_execution_block do |args|
  archive_last_day
end

clean = CmdParse::Command.new( 'clean', false )
clean.short_desc = "clean"
clean.description = "Clean the old log"
clean.options =  CmdParse::OptionParserWrapper::new do |opt|
  opt.on('-d', '--day DAY', "Archive the log old more than x day") { |day| $day = day }
end

clean.set_execution_block do |args|
  if $day.nil?
    puts "--day is mandatory"
    exit -1
  end
  clean($day)
end


cmd.add_command(archive_day)
cmd.add_command(clean)

cmd.parse

