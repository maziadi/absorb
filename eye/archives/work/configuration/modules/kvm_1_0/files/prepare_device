#!/bin/bash
#
#
# Author: Nicolas Hicher <n.hicher@alphalink.fr>
# Support:      support@alphalink.fr
# License:      GNU General Public License (GPL)
# Copyright:  (C) 2010 Alphalink

while getopts :h:s:d:t:m:n:pi opt
do
  case ${opt} in
    h) HOST=${OPTARG};;
    i) IMG="1";;
    s) TOTAL_SIZE=${OPTARG};;
    m) PHY_ONE=${OPTARG};;
    n) PHY_TWO=${OPTARG};;
    '?')  echo "${0} : option ${OPTARG} is not valid" >&2
          exit -1
    ;;
  esac
done

# variables defaults definition
VG="data"
IMG="${IMG:-"0"}"

create_image_file () {
  NAME=$1
  SIZE=$2
  DIRECTORY="/data/images"
  dd if=/dev/zero of=$DIRECTORY/$NAME.img bs=1M count=0 seek=$SIZE > 2&>1 > /dev/null
  echo "The file $DIRECTORY/$NAME.img is ready"
}

create_lv () {
  # test if the logical volume exist
  DEVICE=$1
  SIZE=$2
  lvs | awk '{print $1}' | grep -oE "\b$DEVICE\b"
  if [[ $? -eq 0 ]]
  then
    echo "The device $DEVICE already exist"
    exit -1
  fi
  lvcreate -n $DEVICE -L $SIZE $VG
}

initialize_drbd () {
  NAME_PHY_ONE=${PHY_ONE%:*}
  NAME_PHY_TWO=${PHY_TWO%:*}
  IP_PHY_ONE=${PHY_ONE#*:}
  IP_PHY_TWO=${PHY_TWO#*:}
  DEVICE=$1
  DRBD='/etc/drbd.conf'
  DRBDADM="/sbin/drbdadm"
  # define ports to use for drbd. Initialize if empty
  ports=$(grep address $DRBD | grep -o '[0-9]\{4\}' | sort -u)
  if [[ -z $ports ]]
  then
    port='7789'
  else
    for port in $ports
    do
      port=$((port+1))
    done
  fi

  devices=$(grep -o '/dev/drbd[0-9]*' $DRBD | sed 's:/dev/drbd::' | sort -nu)
  if [[ -z  $devices ]]
  then
    device='/dev/drbd0'
  else
    for device in $devices
    do
      number=$(echo $device | grep -o '[0-9]*')
      device="/dev/drbd$((number+1))"
    done
  fi

  # Test if the device is already present in drbd.conf
  grep -oE "\b$DEVICE\b" $DRBD
  if [ $? == 0 ]
  then
    echo "the device $DEVICE is already configured"
  else
    cat >> $DRBD << EOF
resource $DEVICE {

  on $NAME_PHY_ONE {
    device      $device;
    disk        /dev/$VG/$DEVICE;
    address     $IP_PHY_ONE:$port;
    meta-disk   internal;
  }
  on $NAME_PHY_TWO {
    device      $device;
    disk        /dev/$VG/$DEVICE;
    address     $IP_PHY_TWO:$port;
    meta-disk   internal;
  }
}

EOF
  fi
  #dd if=/dev/zero of=/dev/$VG/$DEVICE bs=1024 count=10
  #drbdadm_commands="create-md attach syncer connect" 
 # drbdadm_commands="create-md attach syncer connect" 
 # for command in $drbdadm_commands
 # do
 #   $DRBDADM $command $DEVICE
 # done
 $DRBDADM -- --force create-md $DEVICE
 $DRBDADM up $DEVICE
 $DRBDADM -- --clear-bitmap new-current-uuid $DEVICE
}


DEVICE="${HOST}"
if [ $IMG -eq 0 ]
then
  #hvm on lvm
  create_lv $DEVICE $TOTAL_SIZE
  initialize_drbd $DEVICE
elif [ $IMG -eq 1 ]
then
  # hvm on image file
  create_image_file $DEVICE $TOTAL_SIZE
fi
