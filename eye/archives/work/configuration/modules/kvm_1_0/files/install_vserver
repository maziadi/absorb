#!/bin/bash
#
#
# Author: Nicolas Hicher <n.hicher@alphalink.fr>
# Support:      support@alphalink.fr
# License:      GNU General Public License (GPL)
# Copyright:  (C) 2010 Alphalink

while getopts :c:h:d:a:i opt
do
  case $opt in
    a) arch=$OPTARG;;
    c) cidr=$OPTARG;;
    d) distrib=$OPTARG;;
    h) NAME=$OPTARG;;
    i) IMG="1";;
    '?')  echo "${0} : option ${OPTARG} is not valid" >&2
          usage
          exit -1;;
    esac
done

arch="${arch:-"i386"}"
distrib="${distrib:-"lenny"}"
IMG="${IMG:-"0"}"

cidr_calc () {
    ip=$(echo $cidr | sed 's:/.*::')
    netmask=$(ipcalc $cidr | grep Netmask | awk '{print $2}')
    gateway=$(ipcalc $cidr | grep HostMin | awk '{print $2}')
}

promote_drbd () {
  DRBDADM='/sbin/drbdadm'
  DRBD_CONFIG='/etc/drbd.conf'
  for device in $swap_device_name $disk_device_name
  do
    drbdadm state $device | grep "^Primary.*"
    if [[ $? == 0 ]]
    then
      echo "The resource $device is already primary"
    else
      drbdadm state $device | grep "Primary"
      if [[ $? == 0 ]]
      then
        echo "The resource $device is already primary on the other node"
        exit -1
      else
        $DRBDADM primary $disk_device_name
      fi
    fi
  done
}

install_host () {
  mkdir $temp_dir
  if [ $IMG -eq 0 ]
  then
    # prepare device
    mkfs.xfs -f $disk_device
    mkswap $swap_device
    # mount system
    mount $disk_device $temp_dir
  elif [ $IMG -eq 1 ]
  then
    swap_loop_device=$(losetup -f)
    losetup -f $swap_device
    disk_loop_device=$(losetup -f)
    losetup -f $disk_device
    mkswap $swap_loop_device
    mkfs.xfs -f $disk_loop_device
    disk_device=$disk_loop_device
    mount -o loop $disk_device $temp_dir
  fi
  #bootstrap
  debootstrap --include=udev,openssh-server --arch $arch $distrib $temp_dir/ http://ftp.fr.debian.org/debian 
}

configure_host () {
  # hostname
  echo $NAME > $temp_dir/etc/hostname
  # networking
  cat > $temp_dir/etc/network/interfaces << EOF
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet static
    address $ip
    netmask $netmask
    gateway $gateway
EOF
  # fstab
  cat > $temp_dir/etc/fstab << EOF
# /etc/fstab: static file system information.
#
# <file system> <mount point>   <type>  <options>       <dump>  <pass>
proc            /proc           proc    defaults        0       0
/dev/xvda1 none swap sw 0 0
/dev/xvda2 / xfs defaults 0 1
EOF
  # hosts
  cat > $temp_dir/etc/hosts << EOF
# HEADER: This file was autogenerated at Fri Dec 05 11:01:02 +0000 2008
# HEADER: by puppet.  While it can still be managed manually, it
# HEADER: is definitely not recommended.
127.0.0.1       localhost

217.15.80.75    gold.alphalink.fr       gold
 
# The following lines are desirable for IPv6 capable NAMEs
::1     ip6-localNAME   ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
ff02::3 ip6-allNAMEs
EOF

cat > $temp_dir/etc/inittab << EOF
# /etc/inittab: init(8) configuration.
# $Id: inittab,v 1.91 2002/01/25 13:35:21 miquels Exp $
# The default runlevel.
id:2:initdefault:

# Boot-time system configuration/initialization script.
# This is run first except when booting in emergency (-b) mode.
si::sysinit:/etc/init.d/rcS

# What to do in single-user mode.
~:S:wait:/sbin/sulogin

# /etc/init.d executes the S and K scripts upon change
# of runlevel.
#
# Runlevel 0 is halt.
# Runlevel 1 is single-user.
# Runlevels 2-5 are multi-user.
# Runlevel 6 is reboot.

l0:0:wait:/etc/init.d/rc 0
l1:1:wait:/etc/init.d/rc 1
l2:2:wait:/etc/init.d/rc 2
l3:3:wait:/etc/init.d/rc 3
l4:4:wait:/etc/init.d/rc 4
l5:5:wait:/etc/init.d/rc 5
l6:6:wait:/etc/init.d/rc 6
# Normally not reached, but fallthrough in case of emergency.
z6:6:respawn:/sbin/sulogin

# What to do when CTRL-ALT-DEL is pressed.
ca:12345:ctrlaltdel:/sbin/shutdown -t1 -a -r now

pf::powerwait:/etc/init.d/powerfail start
pn::powerfailnow:/etc/init.d/powerfail now
po::powerokwait:/etc/init.d/powerfail stop

1:2345:respawn:/sbin/getty 38400 hvc0
EOF
}

create_config_file () {
version=$(uname -r)
cat > /etc/xen/$NAME.cfg << EOF
#  Kernel + memory size
#
kernel      = '/boot/vmlinuz-$version'
ramdisk     = '/boot/initrd.img-$version'
memory      = '256'

#  Disk device(s).
#
root        = '/dev/xvda2 ro'
disk        = [
                  'drbd:$swap_device_name,xvda1,w',
                  'drbd:$disk_device_name,xvda2,w',
              ]
#  NAME
name        = '$NAME'

#  Networking
vif         = [ 'ip=$ip' ]

#  Behaviour
#
on_poweroff = 'destroy'
on_reboot   = 'restart'
on_crash    = 'restart'
EOF
}

clean () {
  umount /$temp_dir
  if [ $IMG -eq 0 ]
    then
    # paravirt on lvm
    $DRBDADM secondary $swap_device_name
    $DRBDADM secondary $disk_device_name 
  elif [ $IMG -eq 1 ]
    then
    DIRECTORY="/data/images"
    swap_device="$DIRECTORY/$NAME-swap.img"
    disk_device="$DIRECTORY/$NAME-disk.img"
    losetup -d $disk_loop_device
    losetup -d $swap_loop_device
  fi
}

if [ -z $NAME ]
then
  echo "Vous devez specifier un nom d'hote"
  usage
  exit -1
fi

if [ -n $cidr ]
then
  cidr_calc
else
  echo "Vous devez spécifier des paramètres ip"
  exit -3
fi
 
swap_device_name="$NAME-swap"
disk_device_name="$NAME-disk"
temp_dir="/tmp/$$"

if [ $IMG -eq 0 ]
  then
  # paravirt on lvm
  swap_device=$(grep -B1 $NAME-swap $DRBD_CONFIG | sort -u | grep -Eo "/dev/drbd[0-9]+")
  disk_device=$(grep -B1 $NAME-disk $DRBD_CONFIG | sort -u | grep -Eo "/dev/drbd[0-9]+")
  promote_drbd
elif [ $IMG -eq 1 ]
  then
  DIRECTORY="/data/images"
  swap_device="$DIRECTORY/$NAME-swap.img"
  disk_device="$DIRECTORY/$NAME-disk.img"
fi

install_host
configure_host
clean
