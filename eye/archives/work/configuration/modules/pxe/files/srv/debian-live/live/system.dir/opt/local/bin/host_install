#!/bin/bash

echo "search admin.alphalink.fr" > /etc/resolv.conf
echo "nameserver 217.15.80.4" >> /etc/resolv.conf

list_raid_device () {
  list=$(fdisk -l /dev/sd[a-z] | grep fd | grep -oE '^/dev/sd[a-z]{1}[1-9]{1}' | tr -s '\n' ' ')
}

destroy_raid () {
  echo "The raid system will be reinitialize, do you want continue ? y/n"
  read answer
  if [ $answer == "n" ]
  then
    echo "nothing to do; exit"
    exit -7
  fi
  list_raid_device
  for raid_md in $(cat /proc/mdstat | grep -oE '^md[0-9]')
  do
    mdadm --stop /dev/$raid_md
    mdadm --remove /dev/$raid_md
  done
  for dev in $list
  do
    mdadm --zero-superblock $dev
  done
}

destroy_lv () {
  echo "All logicals volumes will be destroy, do you want continue ? y/n"
  read answer
  if [ $answer == "n" ]
  then
    echo "nothing to do; exit"
    exit -6
  fi
  if lvs
  then
    for lv in $(lvdisplay | grep 'LV Name' | awk '{print $3}')
    do
      lvremove --force $lv > /dev/null 2>&1 
    done
  fi
  if vgs
  then
    for vg in $(vgdisplay | grep 'VG Name' | awk '{print $3}')
    do
      vgremove --force $vg > /dev/null 2>&1
    done
  fi
  if pvs
  then
    for pv in $(pvdisplay | grep 'PV Name' | awk '{print $3}')
    do
      pvremove --force --force $pv > /dev/null 2>&1
    done
  fi
}


create_lvm () {
  pvcreate $dev_lvm
  vgcreate data $dev_lvm
  lvcreate -L $lv_swap_size -n swap data
  lvcreate -L $lv_root_size -n system data
  if (lvscan | grep inactive)
  then
    for device in $(lvscan | grep -oE "/dev/data/[a-z]+")
    do
      lvchange -a y $device
    done 
  fi
}

create_device () {
  raid_number="${raid_number:-"1"}"
  unit=$(fdisk -l ${hdd} | grep -oE '= [0-9].*bytes'| sed -e 's/= //' -e 's/ bytes//')
  cylinders=$(ruby -e "puts ( 1 + (250*1024*1024/$unit))")
  if [ $raid_number -eq 1 ]
  then
    sfdisk -f ${hdd} <<EOF
,$cylinders,L
,,$filesystem
EOF
  elif [ $raid_number -eq 2 ]
  then
    sfdisk -f ${hdd} <<EOF
,$cylinders,L
,1246,$filesystem
,,$filesystem
EOF
  else
    echo "You cannot create more than 2 devices for raid with this script"
    exit 0
  fi
  sync
  sleep 5
}

find_boot () {
  disk="${hdd:-"/dev/sda"}"
#  hdd=$(echo $disk | grep -oE "/dev/[vhs]d")
#  dev_boot="${hdd}a1"
  if echo $hdd |grep -q "cciss"
  then
    dev_boot="${hdd}p1"
  else
    dev_boot="${hdd}1"
  fi
}

partitionning () {
  hdd="${hdd:-"/dev/sda"}"
  find_boot
  raid_level="${raid_level:-"0"}"
  if [ $raid -eq 1 ]
  then
    swapoff -a
    hdd=$(echo $disk | grep -oE "/dev/[vhs]d")
    for device in $(ls $hdd[a-z])
    do
      filesystem="fd"
      hdd="$device"
      create_device
      dev_lvm="/dev/md0"
    done
  else
    #hdd="${hdd}a"
    filesystem="8e"
    create_device
    if echo $hdd |grep -q "cciss"
    then
      dev_lvm="${hdd}p2"
    else
      dev_lvm="${hdd}2"
    fi
  fi
}

create_raid () {
  hdd=$(echo $disk | grep -oE "/dev/[vhs]d")
  list=$(fdisk -l /dev/sd[a-z] | grep fd | grep "/dev/sd[a-z]$number" | grep -oE '^/dev/sd[a-z]{1}[1-9]{1}' | tr -s '\n' ' ')
  md_number="0"
  for partnumber in $(echo $list | grep -oE "[0-9]" | sort -un)
  do 
    device=$(echo $list | grep -oE "/dev/sd[a-z]$partnumber")
    mdadm -C /dev/md$md_number --level=$raid_level --raid-devices=$raid_nb_device $device
    echo -n "Waiting for raid device /dev/md$md_number to be create ..."
    mdadm -D -t /dev/md$md_number > /dev/null 2>&1
    while [ $? -ne 0 ]; do
      echo -n "."
      sleep 1
      mdadm -D -t /dev/md$md_number > /dev/null 2>&1
    done
    echo " OK"
    mdnumber=$((md_number++))
  done
}

format_system () {
  for dir in $boot $system; do
    if [ ! -d $dir ]; then
      echo "creation directory $dir"
      mkdir $dir
    fi
  done
  echo "formation filesystem"
  mkfs.ext3 $dev_boot
  mkfs.xfs -f $dev_system
  mkswap $dev_swap
}

install_base_system () {
  echo "Installing system via debootstrap"
  if [ $ubuntu -eq 1 ]; then
    cp /usr/share/debootstrap/functions.ubuntu /usr/share/debootstrap/functions # à retirer pour pxe/squeeze
    debootstrap --variant=buildd --arch $arch $distrib $system/ http://archive.ubuntu.com/ubuntu/
  else
    aptitude update > /dev/null 2>&1
    cp /usr/share/debootstrap/functions.$distrib /usr/share/debootstrap/functions # à retirer pour pxe/squeeze
    if [[ $distrib == "lenny" ]]; then
      debootstrap --arch $arch $distrib $system/ http://archive.debian.org/debian/ 
    else
      debootstrap --arch $arch $distrib $system/ http://gold.alphalink.fr:3142/debian/ 
    fi

  fi
}

cidr_calc () {
    ip_address=$(echo $cidr | sed 's:/.*::')
    netmask=$(ipcalc $cidr | grep Netmask | awk '{print $2}')
    gateway=$(ipcalc $cidr | grep HostMin | awk '{print $2}')
}

usage () {
cat <<-USE
  Ce script est destine a installer une debian via debootstrap (install reseau)
  usage : $0 -h hostname -c ip/netmask [-bmuvx] [-d nb_device] [-l type] [-r sys_size[MG]] [-s swap_size[MG]] [-f distrib]
        -a  architecture (defaut i386)
        -b  activer bond + vlan admin
        -c  cidr de la forme ip/mask
        -d  nombre de hdd pour le raid (4 par defaut)
        -f  choix de la distrib (lenny par defaut)
        -l  specification du type de raid (0, 1 ou 10, 0 par defaut)
        -i  specification du device d'installation
        -m  installation sur volume raid
        -n  nombre de volume raid (1 volume par defaut)
        -r  specifer la taille du lv system (10G par defaut)
        -s  specifer la taille du lv swap (1G par defaut)
        -u  install ubuntu server
        -v  pour installer un vserver
        -x  ne pas reconstruire les raid/lvm, formater seulement system
USE
}

while getopts :a:c:d:f:h:i:l:r:s:bmuvx opt
do
  case $opt in
    a) arch=$OPTARG;;
    b) bond="1";;
    c) cidr=$OPTARG;;
    d) raid_nb_device=$OPTARG;;
    f) distrib=$OPTARG;;
    h) hostname=$OPTARG;;
    i) hdd=$OPTARG;;
    l) raid_level=$OPTARG;;
    m) raid="1";;
    n) raid_number=$OPTARG;;
    r) lv_root_size=$OPTARG;;
    s) lv_swap_size=$OPTARG;;
    u) ubuntu="1";;
    v) hdd="/dev/vda";;
    x) rebuild="1";;
    '?')  echo "${0} : option ${OPTARG} is not valid" >&2
          usage
          exit -1;;
    esac
done

if [ -z $hostname ]
then
  echo "You must specifie a hostname"
  usage
  exit -1
fi

if [ -n $cidr ]
then
  cidr_calc
else
  echo "You must specifie ip parameters"
  exit -3
fi

arch="${arch:-"i386"}"
bond="${bond:-"0"}"
rebuild="${rebuild:-"0"}"
distrib="${distrib:-"lenny"}"
raid="${raid:-"0"}"
raid_nb_device="${raid_nb_device:-"4"}"
lv_swap_size="${lv_swap_size:-"1G"}"
lv_root_size="${lv_root_size:-"10G"}"
ubuntu="${ubuntu:-"0"}"

system="/mnt/system"
boot="/mnt/boot"
dev_system="/dev/data/system"
dev_swap="/dev/data/swap"

if [ $rebuild -eq 1 ]; then
  find_boot
else
  if (pvscan | grep 'Total')
  then
    destroy_lv
  fi
  
  if (cat /proc/mdstat | grep -q raid)
  then
    destroy_raid
  fi
  
  partitionning
  
  if [ $raid -eq 1 ]
  then
    echo raid = 1
    create_raid
  fi
  
  create_lvm
  
  echo "Partionning disk"
fi

# create filesystem and format all devices
format_system

mount $dev_system $system

if [ $? -ne 0 ]; then
  echo "Impossible to mount filesystem"
  exit -1
fi

install_base_system

if [ $? -eq 0 ]; then
  echo "Base system installed, go in chroot to finish installation"
else
  install_base_system
fi

# mount des systemes de fichier
echo "Mount system files"
mount -t proc proc $system/proc
mount -o bind /dev $system/dev
mount -t devpts devpts $system/dev/pts
mount -t sysfs none $system/sys

# Créer un sous script pour utiliser dans le chroot
# http://www.infosecprojects.net/en/linuxtutorials/chroot.html

echo "Go in chroot to finish install"
script_path=$(dirname $0)
mkdir -p $system/$script_path
sed -n '/########/,$p' $0 | sed -n '/#!\/bin\/bash/,$p' | \
  sed -e "s:HDD1:$dev_boot:" \
      -e "s:HDD:$disk:" \
      -e "s:DISTRIB:$distrib:" \
      -e "s:ARCH:$arch:" \
      -e "s:HOSTNAME:$hostname:" \
      -e "s:RAID:$raid:" \
      -e "s:IP:$ip_address:" \
      -e "s:BOND:$bond:" \
      -e "s:UBUNTU:$ubuntu:" \
      -e "s:NETMASK:$netmask:" \
      -e "s:GATEWAY:$gateway:" \
      -e "s:DISTRIB:$distrib:" \
      > $system/$0
chmod 700 $system/$0

chroot $system $0
mv $system/$0 $system/tmp

udev="etc/udev/rules.d"
if [ $hdd == "/dev/vda" ]; then
> $system/$udev/70-persistent-net.rules
> $system/$udev/75-persistent-net-generator.rules
fi


echo "Demontage des systemes de fichier"
umount $system/dev/pts
umount $system/dev
umount $system/proc
umount $system/sys
umount $system
echo "La machine est installee, vous pouvez rebooter"
exit 0

######################### chroot environment starts here ####################################
#!/bin/bash
arch="ARCH"
bonding="BOND"
boot="/boot"
dev="HDD1"
disk="HDD"
grub_file="/boot/grub/menu.lst"
interfaces="/etc/network/interfaces"
kernel="/etc/kernel-img.conf"
raid="RAID"
sources_list="/etc/apt/sources.list"
ubuntu="UBUNTU"
ntp="/etc/openntpd/ntpd.conf"

echo "Environment chroot"

# install des packages avec les choix par defaut, pas de question
export DEBIAN_FRONTEND=noninteractive

bond () {
if [ "DISTRIB" = "squeeze" ] || [ "DISTRIB" = "wheezy" ]; then
cat > $interfaces << EOF
auto lo
iface lo inet loopback

auto bond0
iface bond0 inet manual
    bond_slaves eth0 eth1
    bond_mode 1
    bond_miimon 200
    bond_updelay 800
    bond_downdelay 400
    up ip link set bond0 up || true

auto bond0.99
iface bond0.99 inet static
    address IP
    netmask NETMASK
    gateway GATEWAY
EOF
else
cat > $interfaces << EOF
auto lo
iface lo inet loopback

auto bond0
iface bond0 inet manual
    ifaces eth0 eth1
    mode ACTIVE-BACKUP
    miimon 200

auto bond0.99
iface bond0.99 inet static
    address IP
    netmask NETMASK
    gateway GATEWAY
EOF
fi
}

eth () {
cat > $interfaces << EOF
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet static
    address IP
    netmask NETMASK
    gateway GATEWAY
EOF
}

echo "creation du fichier fstab"
echo
cat > /etc/fstab << EOF
# /etc/fstab: static file system information.
#
# <file system> <mount point>   <type>  <options>       <dump>  <pass>
proc            /proc           proc    defaults        0       0
/dev/mapper/data-system /               xfs defaults        0       1
HDD1       /boot           ext3    defaults        0       2
/dev/mapper/data-swap none            swap    sw              0       0
/dev/hdc        /media/cdrom0   udf,iso9660 user,noauto     0       0
EOF

echo "Montage des systèmes de fichier"
echo
sync
mount $dev $boot


echo "Creation du fichier /etc/hostname"
echo
echo HOSTNAME > /etc/hostname

echo "Création du fichier /etc/resolv.conf"
echo
cat > /etc/resolv.conf << EOF
search admin.alphalink.fr
nameserver 217.15.80.4
EOF

echo "Creation d'une conf réseau minimaliste"
if [ $bonding -eq 1 ]
then
  bond
else
  eth
fi

echo "Création du fichier /etc/hosts"
echo
cat > /etc/hosts << EOF
127.0.0.1 localhost

# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
ff02::3 ip6-allhosts
217.15.80.75    gold.alphalink.fr       gold
EOF

#sources.list
echo "Création du fichier $sources_list"
echo
if [ $ubuntu -eq 1 ]; then
  cat > $sources_list << EOF
deb http://archive.ubuntu.com/ubuntu/ hardy main restricted
deb http://archive.ubuntu.com/ubuntu/ hardy-updates main restricted

deb http://archive.ubuntu.com/ubuntu/ hardy universe
deb http://archive.ubuntu.com/ubuntu/ hardy-updates universe

deb http://archive.ubuntu.com/ubuntu/ hardy multiverse
deb-src http://archive.ubuntu.com/ubuntu/ hardy multiverse

deb http://security.ubuntu.com/ubuntu hardy-security main restricted
deb http://alphalink:WBL3UqtLwS@gold.alphalink.fr/debian ubuntu-hardy update internal
EOF
else
  if [ "DISTRIB" = "lenny" ]; then
    cat > $sources_list << EOF
deb http://archive.debian.org/debian/ DISTRIB main contrib non-free
deb-src http://archive.debian.org/debian/ DISTRIB main contrib non-free
deb http://alphalink:WBL3UqtLwS@gold.alphalink.fr/debian DISTRIB update internal
EOF
  else
    cat > $sources_list << EOF
deb http://gold.alphalink.fr:3142/ftp2.fr.debian.org/debian/ DISTRIB main contrib non-free
deb-src http://gold.alphalink.fr:3142/ftp2.fr.debian.org/debian/ DISTRIB main contrib non-free
deb http://gold.alphalink.fr:3142/security.debian.org/ DISTRIB/updates main contrib non-free
deb http://alphalink:WBL3UqtLwS@gold.alphalink.fr/debian DISTRIB update internal
EOF
  fi
fi

echo "Installation du kernel, grub, lvm2, vlan"
echo

if [ $ubuntu -eq 1 ]; then
  apt-get update
  apt-get install -y --force-yes aptitude ubuntu-keyring vim dialog wget netbase
  echo "Recuperation de la cle GPG de gold"
  echo
  wget -O - http://alphalink:WBL3UqtLwS@gold.alphalink.fr/debian/ALPHALINK.GPG | apt-key add -

  aptitude update
  aptitude full-upgrade -y
else
  echo "Recuperation de la cle GPG de gold"
  echo
  wget -O - http://alphalink:WBL3UqtLwS@gold.alphalink.fr/debian/ALPHALINK.GPG | apt-key add -
  aptitude update
  aptitude install debian-keyring -y
fi


# Install locales
aptitude install -y locales
echo "en_US.UTF-8 UTF-8" > /etc/locale.gen
locale-gen en_GB.UTF-8 

cat > $kernel << EOF
do_symlinks = Yes
do_initrd = Yes
EOF

echo 

aptitude install -y console-data openssh-server lvm2 vlan bridge-utils xfsprogs

if echo $disk |grep -q "cciss"
then
  aptitude install -y firmware-bnx2
fi

if [ $ubuntu -eq 1 ]; then
  aptitude install -y linux-image-2.6.24-28-server linux-ubuntu-modules-2.6.24-28-server
else
  case "DISTRIB" in
    squeeze | lenny)  if [ $arch = "i386" ]; then
                aptitude install -y linux-image-2.6-686
              elif [ $arch = "amd64" ]; then
                aptitude install -y linux-image-2.6-amd64
              fi
              ;;
    wheezy)   if [ $arch = "i386" ]; then
                aptitude install -y linux-image-486
              elif [ $arch = "amd64" ]; then
                aptitude install -y linux-image-amd64
              fi
              ;;
 esac
fi


if [ "DISTRIB" = "squeeze" ] || [ "DISTRIB" = "wheezy" ]; then
  aptitude install -y grub-legacy ifenslave-2.6
else
  aptitude install -y bond grub
fi

grub-install $disk > /dev/null 2>&1
update-grub

# Gestion du raid si present
if [ $raid -eq 1 ]
then
  aptitude install -y mdadm
  /etc/init.d/mdadm stop
fi

echo "Configuration des consoles pour grub"
if [ -f $grub_file ]; then
    echo "Modification de $grub_file"
    sed -i 's/data-system ro/data-system ro console=tty0 console=ttyS0,19200n8/' $grub_file
    sed -i '21i\serial --unit=0 --speed=19200 --word=8 --parity=no --stop=1' $grub_file
    sed -i '22i\terminal --timeout=5 serial console' $grub_file
    echo "Mise à jour de grub ok"
    update-grub
fi

if [ $ubuntu -eq 1 ]; then
  cat > /etc/event.d/ttyS0 << EOF
# ttyS0 - getty
#
# This service maintains a getty on ttyS0 from the point the system is
# started until it is shut down again.

start on runlevel 2
start on runlevel 3
start on runlevel 4
start on runlevel 5

stop on runlevel 0
stop on runlevel 1
stop on runlevel 6

respawn
exec /sbin/getty 19200 ttyS0 vt100
EOF
else
  echo "Modification du fichier initab"
  echo "T0:23:respawn:/sbin/getty -L ttyS0 19200 vt100" >> /etc/inittab
fi

echo "Creation du mdp root"

pass=1
while [ $pass -eq 1 ]; do
  passwd root
  if [ $? -eq 0 ]; then
    break
  fi
done

echo "Démontage du rep $boot"
umount $boot

exit 0
