#!/usr/bin/ruby

require 'fileutils'
require 'cmdparse2'

FIFO = "/var/log/syslog.fifo"
CONF_FIFO = "/etc/rsyslog_fifo.conf"
DEST_CONF = "/etc/rsyslog.d/fifo.conf"

cmd = CmdParse::CommandParser.new(true,true)

cmd.program_name = "lisos-syslog"

cmd.add_command(CmdParse::HelpCommand::new, true)


on = CmdParse::Command.new( 'on', false ) 
on.short_desc = "active pipe log"
on.description = "active pipe log"
on.set_execution_block do |args|
	FileUtils::cp CONF_FIFO,DEST_CONF
	if ! File::pipe?(FIFO) then
		system "mkfifo #{FIFO}"
	end
	system "/etc/init.d/rsyslog reload"
end
cmd.add_command(on)

off = CmdParse::Command.new( 'off', false ) 
off.short_desc = "disable pipe log"
off.description = "disable pipe log"
off.set_execution_block do |args|
	FileUtils.rm_f DEST_CONF
	if File::pipe?(FIFO) then
		system "rm -f #{FIFO}"
	end
	system "/etc/init.d/rsyslog reload"
end
cmd.add_command(off)


show = CmdParse::Command.new( 'show', false ) 
show.short_desc = "show the log in pipe"
show.description = "show the log in pipe"
show.set_execution_block do |args|
	if ! File::pipe?(FIFO)
		puts "Pipe not active"
	else
		begin
			while true
				File::open(FIFO, "r+") { |f| puts f.readline } 
			end
		rescue Interrupt => e
		end
	end
end
cmd.add_command(show)

cmd.parse


