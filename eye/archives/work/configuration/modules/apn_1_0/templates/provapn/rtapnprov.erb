#!/usr/bin/env ruby
#
# APN VISP provisionning
#

require "sequel"
require "cmdparse2"

APN_DB_HOST = "<%= virtual_ip %>"
APN_DB_NAME = "<%= db_name %>"
APN_DB_USER = "<%= db_user %>"
APN_DB_PWD = "<%= db_passwd %>"

def visp_list
  return DB["SELECT rtvisp.visprefsi, rtvisp.visprefrt, rtvisp.comment, COUNT(refmsisdn.visprefsi) FROM rtvisp LEFT JOIN refmsisdn ON rtvisp.visprefsi = refmsisdn.visprefsi GROUP BY rtvisp.visprefsi"].all
end

def visp_add(visp, comment=nil)
  rtvisp = DB[:rtvisp].where(:visprefsi => visp ).first
  raise "VISP #{visp} already provisionned." if !rtvisp.nil?
  idx = DB["SELECT (split_part(x.visprefrt, '-', 2)::integer + 1) AS freeid FROM rtvisp AS x LEFT JOIN rtvisp AS y ON (split_part(x.visprefrt, '-', 2)::integer + 1) = split_part(y.visprefrt, '-', 2)::integer WHERE y.visprefrt IS NULL ORDER BY x.visprefrt"].first
  DB[:rtvisp].insert(:visprefsi => visp, :visprefrt => "visp-#{idx[:freeid]}", :comment => comment)
  puts "New routing table: visp-#{idx[:freeid]}"
end

def visp_del(visp)
  exist = DB["SELECT COUNT(*) FROM refmsisdn WHERE visprefsi = '#{visp}'"].all
  raise "VISP #{visp} is used, can not delete it." if exist[0][:count] != 0
  DB[:rtvisp].where(:visprefsi => visp).delete
end

# db connexion
DB = Sequel.postgres(APN_DB_NAME, :host=>APN_DB_HOST, :user=>APN_DB_USER, :password=>APN_DB_PWD)

cmd = CmdParse::CommandParser::new(true, false)
cmd.program_name = "rtapnprov"
cmd.program_version = [0, 0, 1]
cmd.add_command(CmdParse::HelpCommand::new, true)
cmd.add_command(CmdParse::VersionCommand::new)

visp = CmdParse::Command.new('visp', true)
visp.short_desc = "Add or delete a VISP"

# list command
visp_list = CmdParse::Command::new('list', false)
visp_list.short_desc = "List provisionned VISP"
visp_list.description = "List provisionned VISP"
visp_list.set_execution_block do |args|
  puts "VISP\t\tRT-TABLE\tUsed?\tComment"
  visp_list().each { |visp| puts "#{visp[:visprefsi]}\t#{visp[:visprefrt]}\t\t#{visp[:count] == 0 ? '-' : 'used'}\t#{visp[:comment]}" }
end

# add command
visp_add = CmdParse::Command::new('add', false)
visp_add.short_desc = "Add a VISP"
visp_add.description = "Add a VISP and get routing table"
visp_add.options = CmdParse::OptionParserWrapper.new do |opt|
  opt.separator "add options:"
  opt.on('-v', '--visp <VISP>', 'VISP name to add') { |$visp| }
  opt.on('-c', '--comment <COMMENT>', 'Comment for the VISP (use "" for long comment) - optional') { |$comment| }
end
visp_add.set_execution_block do |args|
  begin
    raise "VISP name to add is mandatory !" if $visp.nil?
    visp_add($visp, $comment)
    puts "ok"
  rescue Exception => e
    STDERR.puts e.message
    exit 1
  end 
end

# del command
visp_del = CmdParse::Command::new('del', false)
visp_del.short_desc = "Delete a VISP"
visp_del.description = "Delete a VISP"
visp_del.options = CmdParse::OptionParserWrapper.new do |opt|
  opt.separator "del options:"
  opt.on('-v', '--visp <VISP>', 'VISP name to add') { |$visp| }
end
visp_del.set_execution_block do |args|
  begin
    raise "VISP name to delete is mandatory !" if $visp.nil?
    del = visp_del($visp)
    raise "VISP #{$visp} not found !" if del == 0
    puts "ok"
  rescue Exception => e
    STDERR.puts e.message
    exit 1
  end
end

visp.add_command(visp_list)
visp.add_command(visp_add)
visp.add_command(visp_del)
cmd.add_command(visp)
cmd.parse
