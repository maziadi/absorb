#!/usr/bin/env ruby

require 'rubygems'
require 'sequel'
require 'resolv'
require 'bundler'
ENV["BUNDLE_PATH"] = "/usr/lib/ruby/1.8/voip-tools/bundle"
ENV["BUNDLE_DISABLE_SHARED_GEMS"] = "1"
ENV["BUNDLE_GEMFILE"] = "/usr/lib/ruby/1.8/voip-tools/Gemfile"
Bundler.setup
require 'log4r'
require 'log4r/outputter/syslogoutputter'
begin
    require 'cmdparse2'
rescue LoadError => detail
    require 'cmdparse'
end

Logger = Log4r::Logger.new('manage_mg')
format = Log4r::PatternFormatter.new(:pattern => "%l: %m")

console_stdout = Log4r::StdoutOutputter.new('manage_mg')
console_stdout.only_at Log4r::INFO
console_stdout.formatter = format

console_stderr = Log4r::StderrOutputter.new('manage_mg')
console_stderr.only_at Log4r::WARN,Log4r::ERROR,Log4r::FATAL
console_stderr.formatter = format

syslog = Log4r::SyslogOutputter.new('manage_mg')
syslog.formatter = format

Logger.add(console_stdout)
Logger.add(console_stderr)
Logger.add(syslog)

Logger.level = Log4r::INFO

CONF = "/etc/voip-tools.yaml"

DATABASE_INFOS = YAML.load(File.read(CONF))[:database]

def manage_pcscf_for_an_host(host, status, vno_id)
  cmd_prep = ""
  if $dryrun
    cmd_prep = "echo "
  end
  begin
    table = "dr_gateways"
    if vno_id
      table = "#{vno_id}_dr_gw"
    end
    result = DB[:"#{table}"].select(:gwid).where(:address => "#{host}:5060")
    Logger.debug(result.inspect)
  rescue Sequel::DatabaseError => e
    Logger.error("SEQUEL: #{e.message}")
    exit(1)
  end
  if(count = result.count) > 1
    Logger.error("ne devrait jamais arriver")
    exit(2)
  elsif count == 0
    Logger.warn("gw '#{host}' not found for vno '#{vno_id}'") if vno_id
    Logger.warn("gw '#{host}' not found for c5's pcscf") if vno_id.nil?
    return
  end
  t = result.first
  Logger.debug(t.inspect)
  if vno_id # dans ce cas c'est un pcscf-c4
    if File.exist?("/opt/local/bin/#{vno_id}_opensipsctl")
      if status == 0
        res = `#{cmd_prep}/opt/local/bin/#{vno_id}_opensipsctl fifo dr_gw_status #{t[:gwid]}`
        if res.chomp != "Enabled:: yes"
          Logger.warn("gw '#{host}' is not enabled on '#{vno_id}'s pcscf")
        end
      end
      system("#{cmd_prep}/opt/local/bin/#{vno_id}_opensipsctl fifo dr_gw_status #{t[:gwid]} #{status}")
    else
      Logger.error("/opt/local/bin/#{vno_id}_opensipsctl not found")
      exit(1)
    end
  else 
    if status == 0
      res = `#{cmd_prep}opensipsctl fifo dr_gw_status #{t[:gwid]}`
      if res.chomp != "Enabled:: yes"
        Logger.warn("gw '#{host}' is not enabled on c5's pcscf")
      end
    end
    system("#{cmd_prep}opensipsctl fifo dr_gw_status #{t[:gwid]} #{status}")
  end
end

def manage_pcscfs_for_an_host(host, activate)
  status = activate ? 1 : 0
  vno_list_plus_c5 = VNO_LIST + [nil]
  vno_list_plus_c5.each do |vno_id| 
    manage_pcscf_for_an_host(host, status, vno_id)
  end
end

def manage_pcscfs_for_hosts(hosts, activate)
  begin
    ipaddrs = hosts.map { |t| Resolv.getaddress("XXX."+ t +"-C4.sip.openvno.net")}
  rescue Resolv::ResolvError => e
    Logger.error("DNS: #{e.message}")
    exit(1)
  end
  ipaddrs.each do |host| 
    manage_pcscfs_for_an_host(host, activate)
  end
end

def commons_opt(cmd)
  cmd.options = CmdParse::OptionParserWrapper.new do |opt|
    opt.on("-n", "--dry-run", "Simulate the action without changing anything") {|t| $dryrun = true }
    opt.on("-i", "--include-mg MEDIA_GROUP_ID",  "Include a list of Media Groups") {|t| $include = t }
    opt.on("-e", "--exclude-mg MEDIA_GROUP_ID",  "Exclude a list of Media Groups") {|t| $exclude = t }
  end
end

#
# MAIN
#

DB = Sequel.connect(DATABASE_INFOS)
VNO_LIST = DB[:version].map { |o| o[:table_name][/^(d\d{12})(_\w+)+/,1] }.uniq.compact

cmd = CmdParse::CommandParser.new(true, true)
cmd.program_name = "manage_mg"
cmd.program_version = [0, 0, 1]

cmd.options = CmdParse::OptionParserWrapper.new do |opt|
  opt.separator "Global options:"
  opt.on("-v", "--verbose", "Be verbose when outputting info") {|t| $verbose = true }
  opt.on("-d", "--debug", "Change the log level to debug") {|t| $debug = true }
end

cmd.add_command(CmdParse::HelpCommand::new, false)
cmd.add_command(CmdParse::VersionCommand.new)

activate = CmdParse::Command::new('activate', false)
activate.short_desc = "activate a list of gateways"
activate.description = "activate a list of gateways using opensipsctl and vno's associated opensipsctl commands"
commons_opt(activate)
activate.set_execution_block do |args|
  Logger.level = Log4r::DEBUG if $debug
  if $verbose
    Logger.info("List of gateway(s) going to be UP : #{args.join(', ')}")
    Logger.info("-i, --include options does nothing for PCSCFs") if $include
    Logger.info("-e, --exclude options does nothing for PCSCFs") if $exclude
  else
    Logger.debug("List of gateway(s) going to be UP : #{args.join(', ')}")
    Logger.debug("-i, --include options does nothing for PCSCFs") if $include
    Logger.debug("-e, --exclude options does nothing for PCSCFs") if $exclude
  end
  $hosts = []
  $hosts = args.map { |t| t.split(",")}.flatten
  begin
  manage_pcscfs_for_hosts($hosts, true)
  rescue => e
    Logger.error("#{e.message}")
    exit(1)
  end
  Logger.info("DONE")
end

deactivate = CmdParse::Command::new('deactivate', false)
deactivate.short_desc = "Deactivate a list of gateways"
deactivate.description = "Deactivate a list of gateways using opensipsctl and vno's associated opensipsctl commands"
commons_opt(deactivate)
deactivate.set_execution_block do |args|
  Logger.level = Log4r::DEBUG if $debug
  if $verbose
    Logger.info("List of gateway(s) going to be DOWN : #{args.join(', ')}")
    Logger.info("-i, --include options does nothing for PCSCFs") if $include
    Logger.info("-e, --exclude options does nothing for PCSCFs") if $exclude
  else
    Logger.debug("List of gateway(s) going to be DOWN : #{args.join(', ')}")
    Logger.debug("-i, --include options does nothing for PCSCFs") if $include
    Logger.debug("-e, --exclude options does nothing for PCSCFs") if $exclude
  end
  $hosts = []
  $hosts = args.map { |t| t.split(",")}.flatten
  begin
  manage_pcscfs_for_hosts($hosts, false)
  rescue => e
    Logger.error("#{e.message}")
    exit(1)
  end
  Logger.info("DONE")
end

cmd.add_command(activate)
cmd.add_command(deactivate)

cmd.parse
