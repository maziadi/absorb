#!/usr/bin/env ruby

require 'rubygems'
require 'sequel'
require 'yaml'
require 'resolv'
require 'time'

require 'bundler'
ENV["BUNDLE_PATH"] = "/usr/lib/ruby/1.8/voip-tools/bundle"
ENV["BUNDLE_DISABLE_SHARED_GEMS"] = "1"
ENV["BUNDLE_GEMFILE"] = "/usr/lib/ruby/1.8/voip-tools/Gemfile"
Bundler.setup

CONF = '/etc/voip-tools.yaml'
DATABASE_INFOS = YAML.load(File.read(CONF))[:database]
$db = Sequel.connect(DATABASE_INFOS)

STDOUT.sync = true

def extract_pcscf_c5_accounts
  c5s = {}
  accs = $db[:account].all
  subs = $db[:subscriber]
  cars = $db[:carrierroute].filter(:carrier => '2', :domain => '0')
  trus = $db[:trusted].exclude(:tag => 'MRFC5')

  accs.each do |acc|
    a_c = acc[:account_code]
    sub = subs.filter(:username => a_c).all
    car = cars.filter(:scan_prefix => a_c).all

    tru_pattern = (car.count == 0) ? 'REG_' : ''
    tru_pattern += a_c

    tru = trus.filter(:tag => tru_pattern).all

    if sub.count == 1 && tru.count > 0
      sub = sub.first

      networks = []
      endpoints = []
      if car.count > 0 # IP
        if tru.count != car.count
          STDERR.puts "Something wrong with '#{a_c}'"
          raise "Something wrong with '#{a_c}'"
        end

        endpoints = car.map do |cr|
          ip,port = cr[:rewrite_host].split(':')
          port = port.to_i
          port = 5060 if port == 0
          {
          'ip' => "#{ip}",
          'port' => port.to_i,
          'weight' => cr[:prob],
          'failure' => (car.size > 1 ? 1 : 0)
          }
        end
        context_prefix = ""
      else # REG
        context_prefix = "REG_"
      end
      networks = tru.map do |addr|
        {
        'ip' => "#{addr[:src_ip]}",
        'port' => 5060,
        'weight' => 0.0,
        'failure' => 0
        }
      end

      c5s[a_c] = {
        'group_id' => sub[:carrier],
        'account_code' => "#{a_c}",
        'updated_at' => (acc[:update_date] + 4*3600).iso8601,
        'username' => "#{a_c}",
        'domain' => sub[:domain]
      }
      if endpoints.empty? #REG
        c5s[a_c]['password'] = sub[:password]
        c5s[a_c]['networks'] = networks
      else # IP
        c5s[a_c]['endpoints'] = endpoints
      end
    else
      STDERR.puts "Something wrong with '#{a_c}'"
      raise "Something wrong with '#{a_c}'"
    end

  end

  File.open("hss_c5s_dump.yaml", "w") do |f|
    f.write c5s.to_yaml
  end
end

def extract_pcscf_c4_accounts(vno)
  c4s = {}
  subs = $db[(vno + '_sub').to_sym].all
  cars = $db[(vno + '_cr').to_sym].filter(:carrier => '2', :domain => '0')
  trus = $db[(vno + '_tru').to_sym].exclude(:tag => 'MRFC4')

  subs.each do |sub|
    a_c = sub[:username]
    car = cars.filter(:scan_prefix => a_c).all

    tru_pattern = (car.count == 0) ? 'REG_' : ''
    tru_pattern += a_c

    tru = trus.filter(:tag => tru_pattern).all

    if tru.count > 0
      networks = []
      endpoints = []
      if car.count > 0 # IP
        if tru.count != car.count
          STDERR.puts "Something wrong with '#{a_c}'"
          raise "Something wrong with '#{a_c}'"
        end

        endpoints = car.map do |cr|
          ip,port = cr[:rewrite_host].split(':')
          port = port.to_i
          port = 5060 if port == 0
          {
          'ip' => "#{ip}",
          'port' => port.to_i,
          'weight' => cr[:prob],
          'failure' => (car.size > 1 ? '1' : '0')
          }
        end
        context_prefix = ""
      else # REG
        context_prefix = "REG_"
      end
      networks = tru.map do |addr|
        {
        'ip' => "#{addr[:src_ip]}",
        'port' => 5060,
        'weight' => '1.0',
        'failure' => '0'
        }
      end

      c4s[a_c] = {
        'group_id' => (sub[:carrier] == 1 ? (vno == 'D200911200001' ? 3 : 4) : sub[:carrier]),
        'account_code' => "#{a_c}",
        'updated_at' => Time.at(0).iso8601,
        'username' => "#{a_c}",
        'domain' => sub[:domain]
      }
      if endpoints.empty? #REG
        c4s[a_c]['password'] = sub[:password]
        c4s[a_c]['networks'] = networks
      else # IP
        c4s[a_c]['endpoints'] = endpoints
      end
    else
      STDERR.puts "Something wrong with '#{a_c}'"
      raise "Something wrong with '#{a_c}'"
    end
  end

  File.open("hss_c4_#{vno}_dump.yaml", "w") do |f|
    f.write c4s.to_yaml
  end
end

def extract_pcscf_c5_media_groups
  mgs = {}
  rts = $db[:route_tree].all
  cars = $db[:carrierroute].filter(:domain => '0').exclude(:carrier => 2)  

  rts.each do |rt|
    g_id = rt[:id]
    car = cars.filter(:carrier => g_id).filter(:scan_prefix => '').all

    mgs[g_id] = {
    'group_id' => g_id,
    'updated_at' => rt[:update_date].iso8601
    }

    mgs[g_id]['destinations'] = car.map do |dest|
      ip,port = dest[:rewrite_host].split(':')
      begin
        {
      'destination' => "#{Resolv.getname(ip)}:#{port}",
      'weight' => dest[:prob]
        }
      rescue Resolv::ResolvError
        STDERR.puts "getname of '#{ip}' failed!"
        nil
      rescue
        STDERR.puts "Something wrong with ip '#{ip}' !"
        nil
      end
    end.compact
  end

  File.open("hss_mgs_dump.yaml", "w") do |f|
    f.write mgs.to_yaml
  end
end

#
# PCSCF-C5 : Accounts
#

STDOUT.print "PCSCF-C5, export accounts: "
extract_pcscf_c5_accounts
STDOUT.print "OK.\n"

#
# PCSCF-C5 : media groups
#

STDOUT.print "PCSCF-C5, export media groups: "
extract_pcscf_c5_media_groups
STDOUT.print "OK.\n"

#
# PCSCF-C4s : Accounts
#

req = $db[:version].filter(['table_name like ?', 'D20%']).all
vnos = req.map { |v| v[:table_name][0..12] }.uniq
vnos.each do |vno|
  STDOUT.print "PCSCF-C4[#{vno}], export accounts: "
  extract_pcscf_c4_accounts(vno)
  STDOUT.print "OK.\n"
end

