#!/usr/bin/env ruby
#
# Maintains dynamic puppet git branches
# Based on Puppet Labs (https://puppetlabs.com/blog/git-workflow-and-puppet-environments/)
#
require 'fileutils'
require 'erb'

ENVIRONMENT_BASEDIR = "/var/lib/puppet/branches"
SOURCE_REPOSITORY = File.expand_path(ENV['GIT_DIR'])
FILESERVER_CONF_TEMPLATE = "/etc/puppet/fileserver.conf.erb"
FILESERVER_CONF = "/etc/puppet/fileserver.conf"

ENV.delete('GIT_DIR')

unless File.directory? ENVIRONMENT_BASEDIR
  puts %Q{[post-receive] #{ENVIRONMENT_BASEDIR} does not exist, cannot create environment directories.}
  exit 1
end

# multiple refspecs can be pushed at once, like 'git push origin branch1 branch2'
$stdin.each_line do |line|
  oldrev, newrev, refname = line.split(" ")

  # determine the branch name from the refspec we're received, which is in the
  # format refs/heads/, and make sure that it doesn't have any possibly
  # dangerous characters
  branchname = refname.sub(%r{^refs/heads/(.*$)}) { $1 }
  if branchname =~ /[\W]/
    puts %Q{[post-receive] Branch "#{branchname}" contains non-word characters, ignoring it.}
    next
  end

  environment_path = "#{ENVIRONMENT_BASEDIR}/#{branchname}"

  if not branchname =~ /^nop_.*$/
    if newrev =~ /^0+$/
      # push with a null revision received, something like 000000000000,
      # which means that we should delete the given branch.
      puts "[post-receive] Deleting existing environment #{branchname}"
      if File.directory? environment_path
        current_branches = Dir.entries(ENVIRONMENT_BASEDIR).select{ |d| d != "." and d != ".." }
        $environment_basedir = ENVIRONMENT_BASEDIR
        $branches = current_branches - [branchname]
        template = ERB::new(File.read(FILESERVER_CONF_TEMPLATE))
        fileserver_conf = template.result(binding)
        File::open(FILESERVER_CONF, "w", 0664) { |f| f.write fileserver_conf }
        FileUtils.rm_rf environment_path, :secure => true
      end

    else

      if File.directory? environment_path
        # update env 
        puts "[post-receive] Updating existing environment #{branchname}"
        Dir.chdir environment_path
        %x{umask 0022; git fetch --all}
        %x{umask 0022; git reset --hard "origin/#{branchname}"} # in case someone did a force push
      else
        # new branch: new env 
        puts "[post-receive] Creating new environment #{branchname}"
        current_branches = Dir.entries(ENVIRONMENT_BASEDIR).select{ |d| d != "." and d != ".." }
        $environment_basedir = ENVIRONMENT_BASEDIR
        $branches = current_branches + [branchname]
        template = ERB::new(File.read(FILESERVER_CONF_TEMPLATE))
        fileserver_conf = template.result(binding)
        File::open(FILESERVER_CONF, "w", 0664) { |f| f.write fileserver_conf }
        %x{umask 0022; git clone #{SOURCE_REPOSITORY} #{environment_path} --branch #{branchname}}
      end
    end
  end

end
