#!/bin/bash
#
# Close last unclosed session to authorize new one
# Input : msisdn, rx, tx, stoptime (eg : 2013-02-01T09:44:57+00) [, acctsessionid]
#

. /opt/local/bin/lib-apn.sh

function getref() {
# $1 : msisdn
  local ref=""
  ref=$(su - postgres -c "psql -1 -d <%= db_name %> -c \"SELECT ref FROM refmsisdn WHERE msisdn = '$1';\" -h <%= virtual_ip %>" | sed 's/ //g' | head -n 3 | tail -1)
  echo "$ref"
}

function getip() {
# $1 : username
  local ip=""
  ip=$(su - postgres -c "psql -1 -d <%= db_name %> -c \"SELECT value FROM radreply WHERE radreply.username = '$1' AND radreply.attribute = 'Framed-IP-Address';\" -h <%= virtual_ip %>" | sed 's/ //g' | head -n 3 | tail -1)
  echo "$ip"
}

function usage() {
  fcmd=$(basename $0)
  echo "Usage: $fcmd -m msisdn -r rx -t tx -s stoptime [-i acctsessionid] [-h]"
  echo "-h help           this"
  echo "-m msisdn         msisdn, 336nnnnnnnn"
  echo "-r rx             number of octets received"
  echo "-t tx             number of octets transmitted"
  echo "-s stoptime       session stop time (eg: 2013-02-01T09:44:57+00)"
  echo "-i acctsessionid  accounting session id. Optional, close last one if not specified."
}

nargs=0
while getopts ":hm:r:t:s:i:" optname; do
  case "$optname" in
    "h")
      usage
      exit 0
      ;;
    "m")
      msisdn=$(echo $OPTARG | grep -E "^336[0-9]{8}$")
      if [ "$?" != 0 ]; then
        echo "Bad format: $OPTARG"
        exit -1
      else
        nargs=$(($nargs+1))
      fi
      ;;
    "r")
      rx=$(echo $OPTARG | grep -E "^[0-9]+");
      if [ "$?" != 0 ]; then
        echo "Bad format: $OPTARG"
        exit -1
      else
        nargs=$(($nargs+1))
      fi
      ;;
    "t")
      tx=$(echo $OPTARG | grep -E "^[0-9]+");
      if [ "$?" != 0 ]; then
        echo "Bad format: $OPTARG"
        exit -1
      else
        nargs=$(($nargs+1))
      fi
      ;;
    "s")
      stoptime=$(echo $OPTARG | grep -E "^201[3-9]{1}-[0-1]{1}[0-9]{1}-[0-3]{1}[0-9]{1}T[0-1]{1}[0-9]{1}:[0-5]{1}[0-9]{1}:[0-5]{1}[0-9]{1}\+[0-9]{2}")
      if [ "$?" != 0 ]; then
        echo "Bad format: $OPTARG"
        exit -1
      else
        nargs=$(($nargs+1))
      fi
      ;;
    "i")
      acctsessionid=$(echo $OPTARG | grep -E "[0-9a-z]+")
      if [ "$?" != 0 ] || [ "${#OPTARG}" -ne "16" ]; then
        echo "Bad format: $OPTARG"
        exit -1
      else
        nargs=$(($nargs+1))
      fi
      ;;
    "?")
      echo "Unknown option $OPTARG"
      usage
      exit -1
      ;;
  esac
done
if [ "$nargs" -lt "4" ]; then
  echo "Missing parameters."
  usage
  exit -1
fi
if [ "$msisdn" = "" ]; then
  echo "Missing msisdn"
  usage
  exit -1
fi

# get unstopped session
if [ ${#acctsessionid} == "0" ]; then
  # get last one
  line=$(su - postgres -c "psql -1 -d <%= db_name %> -c \"SELECT * FROM radacct WHERE acctsessionid NOT IN (SELECT acctsessionid FROM radacct WHERE acctstoptime IS NOT null) AND username LIKE '$msisdn%' ORDER BY acctstarttime DESC LIMIT 1;\" -h <%= virtual_ip %>" | grep -v "^[[:space:]]\+radacctid" | grep -v "^-" | grep -v "^(.*row" | grep -v "^$")
else
  # get specified one
  line=$(su - postgres -c "psql -1 -d <%= db_name %> -c \"SELECT * FROM radacct WHERE acctsessionid NOT IN (SELECT acctsessionid FROM radacct WHERE acctstoptime IS NOT null) AND username LIKE '$msisdn%' AND acctsessionid = '$acctsessionid';\" -h <%= virtual_ip %>" | grep -v "^[[:space:]]\+radacctid" | grep -v "^-" | grep -v "^(.*row" | grep -v "^$")
fi

if [ "${#line}" == "0" ]; then
  echo "No session found."
  exit -1
fi

# get fields from START
id=$(echo $line | cut -d'|' -f1 | sed 's/ //g')
sessionid=$(echo $line | cut -d'|' -f2 | sed 's/ //g')
uniqueid=$(echo $line | cut -d'|' -f3 | sed 's/ //g')
ref=$(getref $msisdn)
username=$(echo $line | cut -d'|' -f4 | sed 's/ //g')
ip=$(getip $username)
nasipaddress=$(echo $line | cut -d'|' -f7 | sed 's/ //g')
nasportid=$(echo $line | cut -d'|' -f8 | sed 's/ //g')
nasporttype=$(echo $line | cut -d'|' -f9 | sed 's/ //g')
starttime=$(echo $line | cut -d'|' -f10)
calledstationid=$(echo $line | cut -d'|' -f18 | sed 's/ //g')
callingstationid=$(echo $line | cut -d'|' -f19 | sed 's/ //g')
codemcc=$(echo $line | cut -d'|' -f28 | sed 's/ //g')
timezone=$(echo $line | cut -d'|' -f29 | sed 's/ //g')
visprefsi=$(echo $line | cut -d'|' -f30 | sed 's/ //g')
dateiso=$(echo $starttime| sed 's/ /T/g'| sed 's/:/%3A/g' | sed 's/+00//g')$(date +%z)

echo "Unclosed session found:"
echo "  starttime: $starttime"
echo "  accounting session id: $sessionid"
echo "  account referrence: $ref"
echo "  ip: $ip"
echo "  mcc: $codemcc"
echo "  timezone: $timezone"
echo "  visp: $visprefsi"

# try to send report
echo -e "\nSend report... \c"
response=$(curl --silent --connect-timeout $timeout1 --max-time $timeout2 --write-out "%{http_code}" -d ref=$ref -d mcc=$codemcc -d rx=$rx -d tx=$tx -d date=$dateiso -d timezone=$timezone -L "http://${tax_server}/report" 2>/dev/null)
curlcode=$?
case "$curlcode" in
  0)
    taxhttpcode=$(echo $response | sed 's/ /\n/g' | tail -1)
    ;;
  7)
    taxhttpcode=106 # disconnected
    ;;
  28)
    taxhttpcode=118 # operation timeout
    ;;
  *)
    taxhttpcode=418 # yes, I am a teapot
    ;;
esac

# close session
dt=$(date +%Y%m%d' '%r); ret=0
if [ "$taxhttpcode" == "200" ]; then
  echo "OK"
  stoptime=$(echo $stoptime | sed 's/T/ /')
  echo -e "\nClose session"
  su - postgres -c "psql -1 -d <%= db_name %> -U <%= db_user %> -c \"INSERT INTO radacct (acctsessionid, acctuniqueid, nasipaddress, nasportid, nasporttype, calledstationid, callingstationid, acctterminatecause, username, acctstoptime, sent, mcc, timezone, visprefsi) VALUES ('$sessionid', '$uniqueid', '$nasipaddress', '$nasportid', '$nasporttype', '$calledstationid', '$callingstationid', 'AL $dt', '$username', '$stoptime'::TIMESTAMP, true, $codemcc, '$timezone', '$visprefsi');\" -h <%= virtual_ip %>" >/dev/null
  ret=$?
  [ "$ret" == "0" ] && su - postgres -c "psql -1 -d <%= db_name %> -U <%= db_user %> -c \"UPDATE refmsisdn SET acctsession = false WHERE lastacctsessionid = '$sessionid' ;\" -h <%= virtual_ip %>" >/dev/null
  ret=$(($ret & $?))
  req="UPDATE radacct SET sent = true WHERE radacct.acctsessionid = '$sessionid' ;"
  su - postgres -c "psql -1 -d <%= db_name %> -U <%= db_user %> -c \"$req\" -h <%= virtual_ip %>" >/dev/null
  ret=$(($ret & $?))
else
  echo "FAILED ($taxhttpcode)"
  echo -e "\nClose session"
  su - postgres -c "psql -1 -d <%= db_name %> -U <%= db_user %> -c \"INSERT INTO radacct (acctsessionid, acctuniqueid, nasipaddress, nasportid, nasporttype, calledstationid, callingstationid, acctterminatecause, username, acctstoptime, sent, mcc, timezone, visprefsi) VALUES ('$sessionid', '$uniqueid', '$nasipaddress', '$nasportid', '$nasporttype', '$calledstationid', '$callingstationid', 'AL $dt', '$username', '$stoptime'::TIMESTAMP, true, $codemcc, '$timezone', '$visprefsi');\" -h <%= virtual_ip %>" >/dev/null
  ret=$?
  [ "$ret" == "0" ] && su - postgres -c "psql -1 -d <%= db_name %> -U <%= db_user %> -c \"UPDATE refmsisdn SET acctsession = false WHERE lastacctsessionid = '$sessionid' ;\" -h <%= virtual_ip %>" >/dev/null
  ret=$(($ret & $?))
fi
if [ "$ret" != "0" ]; then
  echo "Aborting"
  exit -1
fi
echo "  session stopped in database (AL-$dt)"

# send delete to PASDARAN
echo -e "  send delete to PASDARAN-1... \c"
mcc=$(echo $codemcc | cut -c1-3)
if [ "$mcc" != "208" ]; then
  ret=$(echo "$ip;D;;0;" | netcat ${pasdaran_server_1})
else
  ret=$(echo "$ip;D;;;" | netcat ${pasdaran_server_1})
fi
echo $(pasdaran_response $ret)

echo -e "  send delete to PASDARAN-2... \c"
if [ "$mcc" != "208" ]; then
  ret=$(echo "$ip;D;;0;" | netcat ${pasdaran_server_2})
else
  ret=$(echo "$ip;D;;;" | netcat ${pasdaran_server_2})
fi
echo $(pasdaran_response $ret)

# send delete to BASIJ
if [ $codemcc != "20810" ]; then
  echo -e " send delete to BASIJ... \c"
  ret=$(echo "$ip;D;;" | netcat ${basij_server})
  echo $ret
fi
