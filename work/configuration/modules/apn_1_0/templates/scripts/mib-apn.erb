#!/usr/bin/ruby

# Version for apn

require 'sequel'

PG_IP="<%= virtual_ip %>"
PG_DB="<%= db_name %>"
PG_USER="<%= db_user %>"
PG_PWD="<%= db_passwd %>"
RT_PRIMARY="<%= pasdaran_ip %>"

DB = Sequel.connect("postgres://#{PG_IP}/#{PG_DB}", :user=>PG_USER, :password=>PG_PWD)

$PLACE = ".1.3.6.1.3.1.10025.3"
$ACTION = ARGV[0]
$REQ = ARGV[1]

# 1.1
def get_connected_mobile_number()
  sql = "select value from radreply inner join (select * from radacct where acctsessionid not in (select acctsessionid from radacct where acctstoptime is not null)) as radacct on radacct.username = radreply.username';" 
  sql = "select count(*) as number from refmsisdn where acctsession = true;"
  number = 0
  DB[sql].each do |p|
    number = p[:number]
  end
  number
end

#1.2
def get_provisionned_mobile_number()
  sql = "select count(*)/6 as number from radcheck where state = 'A';"
  number = 0
  DB[sql].each do |p|
    number = p[:number]
  end
  number
end

#1.3
def get_roaming_mobile_number()
  sql = "select count(*) as number from radacct left join refmsisdn on refmsisdn.lastacctsessionid = radacct.acctsessionid where mcc != '20810' and acctsession = true;" 
  number = 0
  DB[sql].each do |p|
    number = p[:number]
  end
  number
end

#2.1
def get_auth_ok_number()
  sql = "select count(*) as number from radpostauth where authdate > now() - interval '5 minute' and reply = 'Access-Accept';"
  number = 0
  DB[sql].each do |p|
    number = p[:number]
  end
  number
end

#2.2
def get_auth_ko_number()
  sql = "select count(*) as number from radpostauth where authdate > now() - interval '5 minute' and reply = 'Access-Reject';"
  number = 0
  DB[sql].each do |p|
    number = p[:number]
  end
  number
end

#2.3
def get_acct_stop_number()
  sql = "select count(*) as number from radacct where acctstoptime > now() - interval '5 minute';"
  number = 0
  DB[sql].each do |p|
    number = p[:number]
  end
  number
end

#2.4
def get_acct_stop_failed_number()
  sql = "select count(*) as number from radacct where acctstoptime > now() - interval '5 minute' and sent = false;"
  number = 0
  DB[sql].each do |p|
    number = p[:number]
  end
  number
end

# 3.1
def get_activ_public_ip()
  number = 0
  eval(`echo "0.0.0.0;P;;;" | netcat #{RT_PRIMARY} 2403`).each do |stats|
    number += stats.split[0].to_i
  end
  number
end

# 3.2
def get_total_public_ip()
  number = 0
  eval(`echo "0.0.0.0;P;;;" | netcat #{RT_PRIMARY} 2403`).each do |stats|
    number += stats.split[2].to_i
  end
  number
end

if $ACTION == "-s" then
   `echo #{$REQ} >> /tmp/passtest.log`
   exit 0
end

if $ACTION == "-n" then
  case $REQ
  when $PLACE
    $RET = "#{$PLACE}.1.1"
  when "#{$PLACE}.1"
    $RET = "#{$PLACE}.1.1"
  when "#{$PLACE}.1.0"
    $RET = "#{$PLACE}.1.1"
  when "#{$PLACE}.1.1"
    $RET = "#{$PLACE}.1.2"
  when "#{$PLACE}.1.2"
    $RET = "#{$PLACE}.1.3"
  when "#{$PLACE}.1.3"
    $RET = "#{$PLACE}.2.1"
  when "#{$PLACE}.2"
    $RET = "#{$PLACE}.2.1"
  when "#{$PLACE}.2.0"
    $RET = "#{$PLACE}.2.1"
  when "#{$PLACE}.2.1"
    $RET = "#{$PLACE}.2.2"
  when "#{$PLACE}.2.2"
    $RET = "#{$PLACE}.2.3"
  when "#{$PLACE}.2.3"
    $RET = "#{$PLACE}.2.4"
  when "#{$PLACE}.2.4"
    $RET = "#{$PLACE}.3.1"
  when "#{$PLACE}.3"
    $RET = "#{$PLACE}.3.1"
  when "#{$PLACE}.3.0"
    $RET = "#{$PLACE}.3.1"
  when "#{$PLACE}.3.1"
    $RET = "#{$PLACE}.3.2"
  when "#{$PLACE}.3.2"
    $RET = "#{$PLACE}.4"
  else
    exit 0
  end
else
  case $REQ
  when $PLACE
    exit 0
  else
    $RET = $REQ
  end
end

puts $RET

case $RET
when "#{$PLACE}.1.1"
  puts "integer"
  puts get_connected_mobile_number
  exit 0
when "#{$PLACE}.1.2"
  puts "integer"
  puts get_provisionned_mobile_number
  exit 0
when "#{$PLACE}.1.3"
  puts "integer"
  puts get_roaming_mobile_number
  exit 0
when "#{$PLACE}.2.1"
  puts "integer"
  puts get_auth_ok_number
  exit 0
when "#{$PLACE}.2.2"
  puts "integer"
  puts get_auth_ko_number
  exit 0
when "#{$PLACE}.2.3"
  puts "integer"
  puts get_acct_stop_number
  exit 0
when "#{$PLACE}.2.4"
  puts "integer"
  puts get_acct_stop_failed_number
  exit 0
when "#{$PLACE}.3.1"
  puts "integer"
  puts get_activ_public_ip
  exit 0
when "#{$PLACE}.3.2"
  puts "integer"
  puts get_total_public_ip
  exit 0
when "#{$PLACE}.4"
  exit 0
else
   puts "string"
   puts "ack... #{$RET} #{$REQ}"
   exit 0
end
