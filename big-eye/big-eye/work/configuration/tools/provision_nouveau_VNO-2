#!/bin/sh

##############################################
# Script de provisionning automatique de vno #
#   Fabrication Maison : Raf                 #
#   Refactoring        : Tof                 #
##############################################

usage () {
  cat <<EOM >&2
Utilisation : $0 [-p]
  -p : Déploiement sur plaque de préproduction
EOM
  exit 1
}

check_answer () {
  read -p "$1" check_answer_str
  while ! echo "$check_answer_str" | grep -qE "$2"
  do
    read -p "$1" check_answer_str
  done
  echo "$check_answer_str"
}

check_return_code () {
  if [ $1 -ne 0 ]
  then
    cat <<EOM >&2
Echec ($1) !
===========================================
/!\\ CONTACTEZ LE SERVICE INFRASTRUCTURE /!\\
===========================================
EOM
    exit 1
  fi
}



deploy_env="prod"
while getopts :p opt
do
  case $opt in
    p)
      deploy_env="preprod" ;;
    *)
      usage ;;
  esac
done

case $deploy_env in
  prod)
    pcscfs="pcscf-1-cbv1 pcscf-2-cbv2"
    scscfs="scscf-1-cbv1 scscf-1-cbv2"
    rts_voip="rt-voip-1-cbv1 rt-voip-1-cbv2"
    ;;
  preprod)
    pcscfs="pcscf-preprod-1 pcscf-preprod-2"
    scscfs="scscf-preprod-1 scscf-preprod-2"
    rts_voip="rt-voip-preprod-1 rt-voip-preprod-2"
    ;;
esac

cat <<EOM
Environnement cible : $deploy_env
 PCSCFs   : $pcscfs
 SCSCFs   : $scscfs
 RTs VoIP : $rts_voip

EOM


echo "Vérification capacité connexions SQL..."
opensips=$(ssh ${pcscfs%% *} "ls /etc/opensips/*opensips.cfg" | wc -l)
sql=$((opensips * 8))
max_sql=$(ssh ${pcscfs%% *} "awk '\$1==\"max_connections\"{print \$3; exit}' /etc/postgresql/8.4/main/postgresql.conf")
left_opensips=$((($max_sql - $sql) / 8))
if [ $left_opensips -le 0 ]
then
  cat <<EOM >&2
====================================================================
/!\\ Il n'y a plus assez de connexions possibles au serveur SQL ! /!\\
CONTACTEZ LE SERVICE INFRASTRUCTURE
====================================================================
EOM
  exit 1
elif [ $left_opensips -le 10 ]
then
  cat <<EOM >&2
=====================================================
/!\\ Nombre de VNOs produisibles avant saturation : $((($max_sql - $sql) / 8)) /!\\
PREVENEZ LE SERVICE INFRASTRUCTURE
=====================================================
Reprise dans 5 secondes...
EOM
  sleep 5
fi


echo "Veuillez saisir les informations nécessaires à la création du VNO :"
nom=$(check_answer " Nom du client : " "^[[:alnum:] _'-]+$")
party_ref=$(check_answer " party-ref du client : " "^P[0-9]{9}$")
id=$(check_answer " Id de déploiement du VNO client : " "^[dD][0-9]{12}$")
id="D${id#?}"
id_new="d${id#?}"
ip=$(check_answer " Adresse IP du VNO client : " "^([0-9]{1,3}\.){3}[0-9]{1,3}$")
planrout=$(check_answer " Index du plan de routage sur le VNO IS (1- SFR ISDN  2- SFR SIP  6- SFR SS7) : " "^[126]$")
case $(check_answer " Une interco SS7 a-t-elle été commandée (y/Y/o/O/n/N) ? " "^[nNoOyY]$") in
  y|Y|o|O)
    has_ss7="true" ;;
esac
max=$(check_answer " Nombre d'appels simultanés max du VNO : " "^[0-9]+$")
[ -n "$has_ss7" ] && max_ss7=$(check_answer "  Entrez le nombre d'appels simultanés max de l'interco SS7 :" "^[0-9]+$")

ref1=$(awk '$1==":ref:"{ if (res<$2 && $2~/0991000/) { res = $2 } }; END{ gsub(/"/,"",res); printf("%013.0f\n",++res)}' data/voip_accounts.yaml)
ref2="0$((${ref1#0} + 1))"
[ -n "$has_ss7" ] && ref3="0$((${ref2#0} + 1))"
case $(check_answer " Utiliser les prochaines références d'interco disponibles ($ref1 et suivantes) ? (Y/y/O/o/N/n) : " "^[nNoOyY]$") in
  n|N)
    ref1=$(check_answer "  Entrez la ref interco VNO IS => VNO client :" "^0991000[0-9]{6}$")
    ref2=$(check_answer "  Entrez la ref interco VNO client => VNO-IS :" "^0991000[0-9]{6}$")
    [ -n "$has_ss7" ] && ref3=$(check_answer "  Entrez la ref interco SS7 : " "^0991000[0-9]{6}$")
    ;;
esac

sub_num1=$(awk '$1==":subscriber_number:"{ if (res<$2) { res = $2 } }; END{ gsub(/"/,"",res); printf("%.0f\n",++res)}' data/voip_accounts.yaml)
sub_num2=$(($sub_num1 + 1))
[ -n "$has_ss7" ] && sub_num3=$(($sub_num2 + 1))
case $(check_answer " Utiliser les prochains numéros d'identification disponibles ($sub_num1 et suivants) ? (Y/y/O/o/N/n) : " "^[nNoOyY]$") in
  n|N)
    sub_num1=$(check_answer "  Entrez le numéro d'identification pour interco VNO IS => VNO client : " "^33970750[5-9][0-9]{2}$")
    sub_num2=$(check_answer "  Entrez le numéro d'identification pour interco VNO client => VNO IS : " "^33970750[5-9][0-9]{2}$")
    [ -n "$has_ss7" ] && sub_num3=$(check_answer "  Entrez le numéro d'identification pour interco SS7 : " "^33970750[5-9][0-9]{2}$")
    ;;
esac
if [ $sub_num2 -ge 33970750900 ]
then
  cat <<EOM >&2
=======================================================
/!\\ ATTENTION /!\\
Dernière tranche de numéros d'identification entammée !
CONTACTER LE SERVICE INFRASTRUCTURE
=======================================================
Reprise dans 5 secondes...
EOM
  sleep 5
fi

erp_section=$(cat <<EOS
$id:
  party_name: $nom
  party_ref: $party_ref
  description: VNO $nom
EOS
)

voip_accounts_section=$(cat <<EOS
"$ref1":
    :ref: "$ref1"
    :subscriber_number: "$sub_num1"
    :customer: "ALPHALINK - CESAM"
    :party_ref: "$party_ref"
    :label: "interco vno IS - $nom"
    :interco: true
    :ip: "$ip"
    :port: "5060"
    :profile: "e164:e164"
    :max: "$max"
    :carrier_code: "D200911200001.${planrout}"
"$ref2":
    :ref: "$ref2"
    :subscriber_number: "$sub_num2"
    :customer: "$nom"
    :party_ref: "P200001003"
    :label: "interco $nom - VNO-IS"
    :interco: true
    :ip: "217.15.80.249"
    :port: "5060"
    :profile: "e164:e164"
    :max: "$max"
    :carrier_code: "$id.2"
EOS
)
[ -n "$has_ss7" ] && voip_accounts_section=$(cat <<EOS
$voip_accounts_section
"$ref3":
    :ref: "$ref3"
    :subscriber_number: "$sub_num3"
    :customer: "$nom"
    :party_ref: "$party_ref"
    :label: "interco FT-SS7"
    :ss7: true
    :interco: true
    :max: "$max_ss7"
    :carrier_code: "$id.2"
EOS
)

echo "\nSection erp.yaml :"
echo "$erp_section\n"

echo "\nSection voip_accounts.yaml :"
echo "$voip_accounts_section\n"

case $(check_answer "Continuer ? [oOyYnN] : " "^[nNoOyY]$") in
  n|N)
    echo "Arrêt"
    exit 1
    ;;
  *)
    echo "Déploiement du VNO"
    ;;
esac




for pcscf in $pcscfs
do
  echo "\n\nAdressage dummy $pcscf"
  # à chaud
  ssh ${pcscf} "ip address add $ip broadcast $ip dev dummy0"
  check_return_code $?
  # à froid dans le fichier /etc/network/interfaces
  scp ${pcscf}:/etc/network/interfaces /tmp/pcscf-interfaces
  vi -c "%s/\n\#\# FIN DUMMY0 - ne pas effacer : utilise par script prod/  up ip address add $ip broadcast $ip dev dummy0 || true\r\r\#\# FIN DUMMY0 - ne pas effacer : utilise par script prod/" -c "wq" /tmp/pcscf-interfaces
  scp /tmp/pcscf-interfaces ${pcscf}:/etc/network/interfaces
done

[ "$deploy_env" = "prod" ] && for rt in $rts_voip
do
  echo "\n\nRoutage $rt..."
  # a chaud
  ssh $rt "ip r a $ip via 169.254.64.5 proto static dev eth0.710 && ip r a $ip via 169.254.64.36 proto static dev eth0.720 metric 2 && ip r a $ip via 169.254.64.5 proto static dev eth0.710 table 100 && ip r a $ip via 169.254.64.36 proto static dev eth0.720 metric 2 table 100"
  check_return_code $?
  # a froid
  scp ${rt}:/etc/network/interfaces /tmp/rtvoip-interfaces
  vi -c "%s/\# MRFs - eth0.710 \# ne pas modifier cette ligne SVP/        up ip route add $ip via 169.254.64.5 proto static dev eth0.710 || true\r\# MRFs - eth0.710 \# ne pas modifier cette ligne SVP/" -c "wq" /tmp/rtvoip-interfaces
  vi -c "%s/\# MRFs - eth0.720 \# ne pas modifier cette ligne SVP/        up ip route add $ip via 169.254.64.36 proto static dev eth0.720 metric 2 || true\r\# MRFs - eth0.720 \# ne pas modifier cette ligne SVP/" -c "wq" /tmp/rtvoip-interfaces
  vi -c "%s/\# MRFs - eth0.710 table 100 \# ne pas modifier cette ligne SVP/        up ip route add $ip via 169.254.64.5 proto static dev eth0.710 table 100 || true\r\# MRFs - eth0.710 table 100 \# ne pas modifier cette ligne SVP/" -c "wq" /tmp/rtvoip-interfaces
  vi -c "%s/\# MRFs - eth0.720 table 100 \# ne pas modifier cette ligne SVP/        up ip route add $ip via 169.254.64.36 proto static dev eth0.720 metric 2 table 100 || true\r\# MRFs - eth0.720 table 100 \# ne pas modifier cette ligne SVP/" -c "wq" /tmp/rtvoip-interfaces
  scp /tmp/rtvoip-interfaces ${rt}:/etc/network/interfaces
  # assurer la bascule de metric 2 avec sipa
  scp ${rt}:/usr/local/sbin/delete_pcscf_master_routes.sh /tmp/rtvoip-sipad
  vi -c "%s/done/  ip route del $ip via 169.254.64.5 dev eth0.710 proto static   table \$table\rdone" -c "wq" /tmp/rtvoip-sipad
  scp /tmp/rtvoip-sipad ${rt}:/usr/local/sbin/delete_pcscf_master_routes.sh
  echo "Filtrage $rt..."
  # à chaud
  ssh $rt "iptables -A FORWARD -d $ip -j pcscf-c4"
  # à froid
  scp ${rt}:/etc/network/rules /tmp/rtvoip-rules
  vi -c "%s/\n\#\# FIN PCSCFs C4 - ne pas effacer : utilise par script prod/\# $nom\r-A FORWARD -d $ip -j pcscf-c4\r\r\#\# FIN PCSCFs C4 - ne pas effacer : utilise par script prod/" -c "wq" /tmp/rtvoip-rules
  scp /tmp/rtvoip-rules ${rt}:/etc/network/rules
  ssh $rt "lisos-snapshots config"
done



scscf_sql_command="insert into exchange_information (account_code,subscriber_number,max_inbound_calls,max_outbound_calls,max_calls,outbound_numbering_plan,inbound_numbering_plan,locked,carrier_code,weird_identity,creation_date) values ('$ref1','$sub_num1',$max,$max,$max,'e164','e164','0','D200911200001.${planrout}','0',now()); insert into exchange_information (account_code,subscriber_number,max_inbound_calls,max_outbound_calls,max_calls,outbound_numbering_plan,inbound_numbering_plan,locked,carrier_code,weird_identity,creation_date) values ('$ref2','$sub_num2',$max,$max,$max,'e164','e164','0','$id.2','0',now());"
[ -n "$has_ss7" ] && scscf_sql_command="$scscf_sql_command insert into exchange_information (account_code,subscriber_number,max_inbound_calls,max_outbound_calls,max_calls,locked,carrier_code,weird_identity,creation_date) values ('$ss7','$sub_num3',$max_ss7,$max_ss7,$max_ss7,'0','$id.2','0',now());"
for scscf in $scscfs
do
  echo "\n\nAjout des données sur la base SQL AS de $scscf..."
  echo "$scscf_sql_command" | ssh $scscf "mysql --defaults-file=/etc/mysql/debian.cnf as"
  check_return_code $?
done

pcscf_prov_command="bash -l -c '/usr/bin/vno.rb prov -i $id_new -a $ip && /usr/bin/vno.rb prov_mrfc4 -i $id_new && /usr/bin/gen_c4 -v d200911200001 -c $ref1 create -i $ip -g 3 && /opt/local/bin/d200911200001_opensipsctl dr reload && /opt/local/bin/d200911200001_opensipsctl address reload && /usr/bin/gen_c4 -v $id_new -c $ref2 create -i 217.15.80.249 -g 4 && /opt/local/bin/${id_new}_opensipsctl dr reload && /opt/local/bin/${id_new}_opensipsctl address reload'"
for pcscf in $pcscfs
do
  echo "\n\nProvisioning de $pcscf..."
  ssh -t $pcscf "$pcscf_prov_command"
  check_return_code $?
  # maj de la conf slony
  tools/refresh.sh dist/nodes/${pcscf}/etc/slony1/slon_tools.conf
done
for pcscf in $pcscfs
do
  ssh $pcscf "monit restart slony1_opensips"
done

if [ "$deploy_env" = "prod" ]
then
  echo "\n\nMàJ du fichier des nodes pour l'ERP..."
  echo "$erp_section" | ssh si-erp-gestion-1 "cat - >> /etc/erp/erp.yml"
  tools/refresh.sh dist/nodes/si-erp-gestion-1/etc/erp/erp.yml
  echo "\n\nMàJ de voip_accounts.yaml..."
  echo "$voip_accounts_section" >>data/voip_accounts.yaml
  rake voip:maj_voip_si
  echo "\n\nMàJ conf puppet MRFs..."
  vi -c "%s#<%- end %>\n\n<%- if (environment =\~ /^dev\.\*/) %>#[$id]\rtype=friend\rhost=$ip ; mettre un dns\rport=5060\rnat=never\rcontext=inbound-c4\rdtmfmode=rfc2833\rcanreinvite=no\rdisallow=all\rallow=alaw\rallow=ulaw\rallow=g723\rallow=g726\rallow=g729\r\r&#" -c "wq" modules/voip_2_1/templates/mrf/sip.conf.erb 
  vi -c "%s;# FIN C4 GATEWAYS - NE PAS SUPPRIMER;context.c4.outbound.gateways = $id:$ip:5060\r&;" -c "wq" modules/voip_2_1/templates/icscf/hosts.properties.erb
  vi -c "%s;# FIN C4 HOSTS - NE PAS SUPPRIMER;context.c4.inbound.hosts = $id:$ip:5060\r&;" -c "wq" modules/voip_2_1/templates/icscf/hosts.properties.erb
  echo "\n\nrake publish_prod"
  rake publish_prod MSG="Production VNO $nom"
  echo "\n\nUpload voip_accounts.yaml vers machines de log..."
  for host in log-1 log-2
  do
    scp data/voip_accounts.yaml ${host}:/root/
  done
elif [ "$deploy_env" = "preprod" ]
then
  echo "\n\nrake publish_prod"
  rake publish_prod MSG="Production VNO $nom préprod"
fi




# Avertissement puppetisation des MRFs
echo "\n\nProduction du VNO presque terminée ; puppetizer tous les MRFs pour finir :"
echo "  tools/infra.rb rexec 'mrf-\d+(-[cde].*)?$' -c \"puppetd --test --verbose --noop\""
echo "Enlever le \"--noop\" si tout va bien. L'opération prend du temps..."
