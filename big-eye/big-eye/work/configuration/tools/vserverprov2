#!/usr/bin/env ruby

require 'rubygems'
begin
    require 'cmdparse2'
rescue LoadError => detail
    require 'cmdparse'
end
require 'tools/vserver/vserver2'


cmd = CmdParse::CommandParser.new(true,true)
cmd.program_name = "vserverprov2"
cmd.add_command( CmdParse::HelpCommand.new )
cmd.add_command( CmdParse::VersionCommand.new )
cmd.options = CmdParse::OptionParserWrapper.new do |opt|
  opt.separator "Global options:"
  opt.on( '-h', '--hostname <HOSTNAME>','Specifie hostname' )       { |hostname| $hostname = hostname }
  opt.on( '-c', '--cluster <CLUSTER>',  'Specifie cluster name' )   { |cluster| $cluster = cluster }
end

# add vserver
add = CmdParse::Command.new( 'add', false )
add.short_desc = "add vserver (config file, disk space)"
add.options = CmdParse::OptionParserWrapper.new do |opt|
  opt.separator "add options:"
  opt.on( '-b', '--bridge <BRIDGE>',  'Specifie bridge to use' )  { |bridge| $bridges << bridge }
  opt.on( '-c', '--cpu <CPU>',          'Specifie number of cpu (default 1)' )          { |cpu| $cpu = cpu }
  opt.on( '-m', '--memory <MEM>',       'Specifie memory size with unit (ex 512M)' )    { |memory_size| $memory_size = memory_size }
  opt.on( '-s', '--system <SYS>',       'Specifie system size with unit (ex 20G)' )      { |system_size| $system_size = system_size }
  opt.on( '-p', '--prefered <HOST>',   'Specifie prefered host for the vm' )      { |prefered| $prefered = prefered }
  opt.on( '--hda',  'Disk support for Windows or GNU/Hurd guest system' )  { $hda = true }
end

$bridges = []
$cpu = "1" if $cpu.nil?


add.set_execution_block do |args|
  error = "\n\nSome options are mandatory"
  error += "\n\t-b or --bridges" if $bridges.empty?
  error += "\n\t-m or --memory_size" if $memory_size.nil?
  error += "\n\t-s or --system_size" if $system_size.nil?
  error += "\n\t-p or --prefered" if $prefered.nil?
  raise CmdParse::InvalidArgumentError,error if $bridges.nil? or $memory_size.nil? or $system_size.nil? or $prefered.nil?
  vserver = Vserver2::new :hostname    => $hostname,
                          :cluster     => $cluster,
                          :bridges     => $bridges, 
                          :cpu         => $cpu, 
                          :memory_size => $memory_size, 
                          :system_size => $system_size, 
                          :prefered    => $prefered,
                          :hda     => $hda
  vserver.add_vserver
end

# delete vserver
delete = CmdParse::Command.new( 'delete', false )
delete.short_desc = "delete vserver (config file, data)"
delete.set_execution_block do |args|
  vserver = Vserver2::new :hostname => $hostname, :cluster => $cluster
  vserver.delete_vserver
end

cmd.add_command(add)
cmd.add_command(delete)

cmd.parse
