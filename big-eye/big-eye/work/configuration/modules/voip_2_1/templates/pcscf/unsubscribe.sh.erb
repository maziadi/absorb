#!/bin/sh

failed ()
{
  echo "An error occurred" >&2
  exit 1
}

list_sets()
{
  grep set_id /etc/slony1/slon_tools.conf | sed -e 's/.*"set_id" => \([0-9]\+\),/\1/'
}

if [ -f /var/lock/slony1/opensips.lock ];then
  for s in $(list_sets); do 
    echo "Canceling subscription to set $s"
    /usr/bin/slonik_unsubscribe_set $s 2|/usr/bin/slonik || failed
  done
  echo "Removing lock file"
  rm /var/lock/slony1/opensips.lock || failed

  echo "Enabling probing on gateways type 1"
  locations=`psql -t -U postgres opensips -c "SELECT table_name from information_schema.tables where table_name ~ '(^([dD][0-9]+_loc|location)$)';"`
  for l in $locations;do
    if [ $l = 'location' ]; then
      /usr/bin/psql opensips postgres -c "UPDATE dr_gateways SET probe_mode=2 WHERE type=1"
      echo "Reloading drouting"
      /usr/sbin/opensipsctl dr reload
    else
      vno_id=`echo $l|sed -r 's/([dD][0-9]{12})_loc/\1/'`
      /usr/bin/psql opensips postgres -c "UPDATE \"${vno_id}_dr_gw\" SET probe_mode=2 WHERE type=1"
      echo "Reloading drouting for ${vno_id}"
      /opt/local/bin/${vno_id}_opensipsctl dr reload
    fi
  done

else
  echo "/var/lock/slony1/opensips.lock does not exist: current node should not be a slave."
fi
