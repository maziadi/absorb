#
# $Id: opensips.cfg 8758 2012-02-29 11:59:26Z vladut-paiu $
#
# OpenSIPS residential configuration script
#     by OpenSIPS Solutions <team@opensips-solutions.com>
#
# This script was generated via "make menuconfig", from
#   the "Residential" scenario.
# You can enable / disable more features / functionalities by
#   re-generating the scenario with different options.#
#
# Please refer to the Core CookBook at:
#      http://www.opensips.org/Resources/DocsCookbooks
# for a explanation of possible statements, functions and parameters.
#


####### Global Parameters #########

debug=2
log_stderror=no
log_facility=LOG_LOCAL0

fork=yes
children=4

/* uncomment the following lines to enable debugging */
#debug=6
#fork=no
#log_stderror=yes

/* uncomment the next line to enable the auto temporary blacklisting of 
   not available destinations (default disabled) */
#disable_dns_blacklist=no

/* uncomment the next line to enable IPv6 lookup after IPv4 dns 
   lookup failures (default disabled) */
#dns_try_ipv6=yes

/* comment the next line to enable the auto discovery of local aliases
   based on revers DNS on IPs */
auto_aliases=no


port=<%= opensips_port %>

<% opensips_service_addr.each do |addr| -%>
listen=udp:<%= addr %>:<%= opensips_port %>
<% end -%>

disable_tcp=yes

####### Modules Section ########

#set module path
mpath="/usr/lib/opensips/modules/"

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timer", 12)
modparam("tm", "fr_inv_timer", 120)
modparam("tm", "T1_timer", 250)
modparam("tm", "wt_timer", 12)
modparam("tm", "restart_fr_on_each_reply", 1)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 0)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
loadmodule "mi_fifo.so"
#modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_name", "/var/run/opensips/opensips_fifo")


#### URI module
loadmodule "uri.so"
modparam("uri", "use_uri_table", 0)

#### USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", 6)
<% if (pcscf_is_a_backup) -%>
modparam("usrloc", "db_mode", 3)
<% else -%>
modparam("usrloc", "db_mode", 2)
<% end -%>

#### REGISTRAR module
loadmodule "registrar.so"
modparam("registrar", "received_avp", "$avp(42)")

/* uncomment the next line not to allow more than 10 contacts per AOR */
#modparam("registrar", "max_contacts", 10)

#### ACCounting module
#loadmodule "acc.so"

####RTPPROXY & MEDIAPROXY modules
#loadmodule "rtpproxy.so"
loadmodule "mediaproxy.so"
loadmodule "dialog.so"

modparam("mediaproxy","mediaproxy_socket", "/var/run/mediaproxy/dispatcher.sock")


loadmodule "db_postgres.so"
loadmodule "auth.so"
loadmodule "auth_db.so"
loadmodule "textops.so"
loadmodule "permissions.so"
loadmodule "domain.so"
loadmodule "drouting.so"
loadmodule "nathelper.so"
loadmodule "avpops.so"

loadmodule "carrierroute.so"

modparam("carrierroute", "config_source", "db")
modparam("carrierroute", "subscriber_carrier_col", "group_id")

modparam("auth_db|permissions|carrierroute|domain|acc|usrloc|drouting|avpops", "db_url", "postgres://<%= opensips_db_user %>:<%= opensips_db_password %>@localhost/opensips")
modparam("auth_db", "calculate_ha1", yes)
modparam("auth_db", "password_column", "password")
modparam("auth_db", "load_credentials", "")
# use_domain désactivé pour compatibilité avec les PCSCF 2.0
modparam("auth_db", "use_domain", 0)

modparam("domain", "db_mode", 1) # Use caching

# ------- drouting params -------
modparam("drouting", "use_domain", 0)
modparam("drouting", "probing_interval",10)
modparam("drouting", "probing_from", "sip:drouting-pinger@<%= opensips_service_addr.first %>")
modparam("drouting", "probing_method", "OPTIONS")
modparam("drouting", "drc_table", "dr_carriers")
modparam("drouting", "default_group", 1)

# ------- nathelper params -------
modparam("nathelper", "natping_interval", 30)
modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "received_avp", "$avp(42)")
modparam("nathelper", "sipping_bflag", 6)
modparam("nathelper", "sipping_from", "sip:natpinger@sip.openvno.net")

loadmodule "exec.so"
modparam("exec", "time_to_kill", 5)

loadmodule "uac_auth.so"
loadmodule "uac.so"
modparam("uac","restore_mode","none")

####### Routing Logic ########

# main request routing logic

route{
<% if (pcscf_is_a_backup) -%>
  if(!$var(unsubscribe_done) && !is_method("OPTIONS")) {
     if(!exec_msg("/opt/local/bin/unsubscribe.sh")) {
       xlog("L_WARN", "C5 : slony unsubscribe : NOK");
     } else {
       xlog("L_INFO", "C5 : slony unsubscribe : OK");
       $var(unsubscribe_done) = 1;
     }
  }

<% end -%>
	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

  if (msg:len >=  2048 ) {
    sl_send_reply("513", "Message too big");
    exit;
  }

  $avp(nat)="";

  if nat_uac_test("23"){
    if ($si != '217.15.88.195') {
      setbflag(6);
      force_rport();
      $avp(nat)="NAT";
    }
  }

	if (has_totag()) {
		# sequential request withing a dialog should
		# take the path determined by record-routing

    xlog("L_INFO", "C5::$avp(nat)::$si:$sp::$avp(account_code)::$rm::xxx::$ru::to_tag");

    if (loose_route()) {
			
      if(check_route_param("nat=yes")) {
        setbflag(6);
      }
			if (is_method("BYE")) {
        end_media_session();
			} else if (is_method("INVITE")) {
        if isbflagset(6) {
          xlog("L_INFO", "C5 : fixing contact (RE-INVITE)");
          fix_nated_contact();
        }
				# even if in most of the cases is useless, do RR for
				# re-INVITEs alos, as some buggy clients do change route set
				# during the dialog.
				record_route();
			}

      if( is_method("ACK") && is_uri_host_local() ) {
        xlog("L_WARNING", "C5::Ignore Ack : host_uri can't be myself");
        exit;
      }
			# route it out to whatever destination was set by loose_route()
			# in $du (destination URI).
			route(1);
		} else {
			
			if ( is_method("ACK") ) {
				if ( t_check_trans() ) {
					# non loose-route, but stateful ACK; must be an ACK after 
					# a 487 or e.g. 404 from upstream server
					t_relay();
					exit;
				} else {
					# ACK without matching transaction ->
					# ignore and discard
					exit;
				}
			}
			sl_send_reply("404","Not here");
		}
		exit;
	}

#initial requests
  if (is_method("ACK")){
    xlog("L_WARNING","C5 : Ignore orphan ACK");
    exit;
  }
  if (is_method("BYE")){
    xlog("L_WARNING","C5 : Ignore orphan BYE");
    sl_send_reply("481", "Call Does Not Exist");
    exit;
  }

  if (!is_method("REGISTER")){
    if (isbflagset(6)) {
      record_route(";nat=yes");
    } else {
      record_route();
    }
  }

	# CANCEL processing
	if (is_method("CANCEL"))
	{
		if (t_check_trans())
      xlog("L_NOTICE", "C5::$avp(nat)::$si:$sp::$avp(account_code)::$rm::xxx::$ru");
			t_relay();
      xlog("L_INFO","Stopping mediaproxy due to the end of the call (method CANCEL)");
      end_media_session();
		exit;
	}

	t_check_trans();

	if (loose_route()) {
		xlog("L_ERR",	"Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
		if (!is_method("ACK"))
      sl_send_reply("403","Preload Route denied");
    exit;
  }

	# requests for my domain
	
	if (is_method("PUBLISH|SUBSCRIBE")) {

		sl_send_reply("503", "Service Unavailable");
		exit;
	}

	if ($rU==NULL) && !is_method("REGISTER") {
		# request with no Username in RURI
    if (!is_method("OPTIONS")) { # pass if method is option
      xlog("L_NOTICE","C5::$avp(nat)::$si:$sp::none::$rm::484::$ru::Address Incomplete");
      sl_send_reply("484","Address Incomplete");
      exit;
    }
	}

  if(is_method("INVITE") && ! is_uri_host_local()) {
    xlog("L_NOTICE","C5::$avp(nat)::$si:$sp::none::$rm::488::$ru::Host URI is not myself");
    sl_send_reply("488","Not Acceptable here");
    exit;
  }

#-------------------------------------------------------------------

# use function check_address() or check_source_address() [from "permissions" module] instead of allow_trusted()

  if (check_source_address("", "$avp(707)")) {
    if($avp(707)=="MRFC5") {
      xlog("L_INFO", "C5 : source is a MRF");
      if (is_present_hf("X-AccountCode") || $si == '217.15.88.195') {
        if ($si == '217.15.88.195') {
          $avp(account_code) = $rU;
          xlog("L_INFO", "C5 :  source address = $si");
        }
        else {
          $avp(account_code) = $hdr(X-AccountCode);
          xlog("L_INFO", "C5 : account_code=$avp(account_code)");
        }
        remove_hf("X-AccountCode");
        remove_hf("X-CarrierCode");
        # Completion de l'anonymat vers les comptes C5
        if (is_privacy("id")) {
          xlog("L_INFO","C5::$avp(nat)::$si:$sp::$Au::$rm::XXX::$ru::Privacy header\n");
          uac_replace_from("\"Anonymous\"","sip:anonymous@anonymous.invalid");
        }

        $avp(old_ru)=$rU;
        $rU=$avp(account_code);

        if (do_routing("2", "W"))  {

          $rU=$avp(old_ru);
          xlog("L_INFO", "calling do_routing() MRF Section");
          route(1);
          exit;
        }
        else {
          if (lookup("location")) {#  dans module registrar:est-ce que rU est dans des contacts de location. bool
            xlog("L_INFO", "C5 : dans boucle if lookup location");
            setbflag(1); # not to apply failover in failure_route[1]
            $rU=$avp(old_ru);
            route(1);
            exit;
          }
          else {
            xlog("L_ERR","C5::$avp(nat)::$si:$sp::$avp(account_code)::$rm::480::Not found in location : not connected or unexisting Erreur 480 -> could be error 604");
            sl_send_reply("480", "Temporarily unavailable : Not registered");
            exit;
          }
        }
      }
      else {
        xlog("L_ERR","C5::$avp(nat)::$si:$sp::none::$rm::400::X-AccountCode absent, return 400 Bad request");
        sl_send_reply("400", "Bad request : missing X-AccountCode");
        exit;
      }
    } else if($(avp(707){s.substr,0,3}) == "REG") {
      if (is_method("REGISTER")) {
        # authenticate the REGISTER requests (uncomment to enable auth)
        if(!search("^Contact:[ ]*\*") && isbflagset(6)) {
           xlog("L_INFO","C5 : NAT detected");
           fix_nated_register();
        }

        if (!www_authorize("sip.openvno.net", "subscriber")) {
          switch($rc){
              case -1:
                  xlog("L_NOTICE","C5::$avp(nat)::$si:$sp::$Au::$rm::403::Invalid User\n");
                  sl_send_reply("403","Authentication failure");
                  exit;
              break;
              case -2:
                  xlog("L_NOTICE","C5::$avp(nat)::$si:$sp::$Au::$rm::403::Invalid Password\n");
                  sl_send_reply("403","Authentication failure");
                  exit;
              break;
              case -3:
                  xlog("L_INFO","C5::$avp(nat)::$si:$sp::$Au::$rm::401::Stale Nonce\n");
              break;
              case -4:
                  xlog("L_NOTICE","C5::$avp(nat)::$si:$sp::$Au::$rm::401::No Credentials\n");
              break;
              case -5:
                  xlog("L_NOTICE","C5::$avp(nat)::$si:$sp::$Au::$rm::500::Generic Error\n");
                  sl_send_reply("500","Internal server Error");
                  exit;
              break;
              default:
                 xlog("L_NOTICE","C5::$avp(nat)::$si:$sp::$Au::$rm::403::Return Code ($rc)\n");
                  sl_send_reply("500","Internal server Error");
          }
          www_challenge("sip.openvno.net", "0");
          exit;
        }

        if (!db_check_from()) {
          xlog("L_NOTICE","C5::$avp(nat)::$si:$sp::$Au::$rm::403::UserID and AuthenticateID mismatch.");
          sl_send_reply("403","Forbidden : Authentication failure");

          exit;
        }

        xlog("L_NOTICE","C5::$avp(nat)::$si:$sp::$Au::$rm::200");

        if (!save("location"))
          sl_reply_error(); #a revoir

        exit;
      } else if(is_method("INVITE")) {
        if isbflagset(6) {
          xlog("L_INFO", "---- NAT----");
          xlog("L_INFO", "C5 : fixing contact");
          fix_nated_contact();
        }
        if (!proxy_authorize("sip.openvno.net", "subscriber")) {
          switch($rc){
              case -1:
                  xlog("L_NOTICE","C5::$avp(nat)::$si:$sp::$Au::$rm::403::$ru::Invalid User\n");
                  sl_send_reply("403","Proxy authentication failure");
                  exit;
              break;
              case -2:
                  xlog("L_NOTICE","C5::$avp(nat)::$si:$sp::$Au::$rm::403::$ru::Invalid Password\n");
                  sl_send_reply("403","Proxy authentication failure");
                  exit;
              break;
              case -3:
                  xlog("L_INFO","C5::$avp(nat)::$si:$sp::$Au::$rm::407::$ru::Proxy stale Nonce\n");
              break;
              case -4:
                  xlog("L_NOTICE","C5::$avp(nat)::$si:$sp::$Au::$rm::407::$ru::Proxy No Credentials\n");
              break;
              case -5:
                  xlog("L_NOTICE","C5::$avp(nat)::$si:$sp::$Au::$rm::500::$ru::Proxy Generic Error\n");
                  sl_send_reply("500","Internal server Error");
                  exit;
              break;
              default:
                  xlog("L_NOTICE","C5::$avp(nat)::$si:$sp::$Au::$rm::500::$ru::INVITE - Return Code ($rc)\n");
                  sl_send_reply("500","Internal server Error");
                  exit;
          }
          proxy_challenge("sip.openvno.net", "0");
          exit;
        }

        consume_credentials();
        remove_hf("X-AccountCode");
        remove_hf("X-CarrierCode");
        $avp(account_code)=$au;
        append_hf("X-AccountCode: $avp(account_code)\r\n");

        cr_user_carrier("$avp(account_code)", "$od", "$avp(group_id)");

        if (do_routing("$avp(group_id)", "W"))  {

          xlog("L_INFO", "calling do_routing() REG Section") ;
          route(1);
          exit;
        }
        xlog("L_WARNING","C5::$avp(nat)::$si:$sp::$avp(account_code)::$rm::503::Service Unavailable routing with DR: went wrong.\n");
        sl_send_reply("503","Service Unavailable");
        exit;
      } else if (is_method("OPTIONS")) {
        # TODO : gestion du nat
        sl_send_reply("200", "OK");
        exit;
      }
    }
    else {

  ######################### CODE LIE AU CENTREX POUR STRIPPER LES URI ###############################
      if ($si=="217.15.80.251"){ #centrex alphalink
        remove_hf("X-AccountCode");
        remove_hf("X-CarrierCode");
        xlog("L_INFO", "C5 : Centrex alphalink");
        strip(7);
      }
      if ($si=="217.15.80.254") { #centrex mutualisé
        remove_hf("X-AccountCode");
        remove_hf("X-CarrierCode");
        xlog("L_INFO", "Centrex mutualise");
        $avp(account_code)="0990000"+$(rU{s.substr,0,3})+"900";

        cr_user_carrier("$avp(account_code)", "$od", "$avp(group_id)");

        append_hf("X-AccountCode: $avp(account_code)\r\n");
        strip(7);

        if (do_routing("$avp(group_id)", "W")) {

          route(1);
          exit;
        }
        else {
          xlog("L_ERR","C5::$avp(nat)::$si:$sp::$avp(account_code)::$rm::503::Erreur lors du traitement DROUTING");
          sl_send_reply("503", "Service Unavailable");
          exit;
        }
      }

##################################################################################################

      xlog("L_INFO", "C5 : source is external '$avp(707)'");

      if (is_method("REGISTER")) {
        sl_send_reply("403", "Forbidden");
        xlog("L_NOTICE","C5::$avp(nat)::$si:$sp::$Au::$rm::403::$ru::IP account not allowed to use method REGISTER\n");
        exit;
      }

      if (is_method("OPTIONS")) {
        sl_send_reply("200", "OK");
        exit;
      }

#Supprimer les champs sip Alphalink, récupérer carrier (C4 ou C5 ?), ajouter account code et cr_route() // En cas anomalie erreur 500 ou 503
      remove_hf("X-AccountCode");
      remove_hf("X-CarrierCode");
      $avp(account_code)=$avp(707);
      append_hf("X-AccountCode: $avp(account_code)\r\n");

      cr_user_carrier("$avp(account_code)", "$od", "$avp(group_id)");

      if (do_routing("$avp(group_id)", "W")) {
        xlog("L_INFO","C5 : drouting OK");
        route(1);
        exit;
      }
      else {
        xlog("L_ERR","C5::$avp(nat)::$si:$sp::$avp(account_code)::$rm::503::Error while processing drouting");
        sl_send_reply("503", "Service Unavailable");
        exit;
      }
    }
  }
  else {
    if (is_method("OPTIONS")) {
      if ($si == '<%= opensips_service_addr.first %>') {
        xlog("L_INFO", "monit's check -> OK\n");
        force_rport();
        sl_send_reply("200", "OK");
        exit;
      } else if ($rU == 'ping') {
        xlog("L_INFO", "SIPA check -> OK\n");
        sl_send_reply("200", "OK");
        exit;
      }
    }
    xlog("L_NOTICE","C5::$avp(nat)::$si:$sp::$Au::$rm::403::$ru::IP forbidden\n");
    sl_send_reply("403", "Forbidden");
    exit;
  }
}


route[1] {
  xlog("L_INFO", "C5 : route1 ($fu/$si/$rP) -> ($rm/$ru/$Ri/$Rp)");
  # for INVITEs enable some additional helper routes
  if (isbflagset(6)) {
    $avp(nat)="NAT";
    add_rr_param(";nat=yes");
  }
  if (is_method("INVITE")) {
    if (isbflagset(6)) {
      xlog("L_INFO", "C5 : using mediaproxy");

      if(!use_media_proxy()) {
        xlog("L_ERR", "C5::$avp(nat)::$si:$sp::$avp(account_code)::$rm::mediaproxy error ($rc)");
      }
    }

    xlog("L_INFO","C5 : INVITE ($rU)");
    t_on_reply("1");
    t_on_failure("1");
  }

  if (!t_relay()) {
		sl_reply_error();
    xlog("L_ERR", "C5 : t_relay failed\n");
    exit;
  }
  xlog("L_NOTICE", "C5::$avp(nat)::$si:$sp::$avp(account_code)::$rm::xxx::$ru");
  exit;
}

onreply_route[1] {
  xlog("L_INFO", "C5 : onreply_route[1]");
  if (isbflagset(6)) {
    $avp(nat)="NAT";
    xlog("L_INFO", "C5 : fix_nated_contact");
    fix_nated_contact();
  }
  if (isbflagset(6) && (status=~"(180)|(183)|2[0-9][0-9]")) {
    if (search("^Content-Type:[ ]*application/sdp")) {
      xlog("L_INFO", "C5 : use_media_proxy");
      if(!use_media_proxy()) {
        xlog("L_ERR", "C5::unknown::$rm:: Mediaproxy error ($rc)");
      }
    }
  }
  exit;
}

failure_route[1] {
  xlog("L_NOTICE", "C5::$avp(nat)::$si:$sp::$avp(account_code)::$rm::$T_reply_code::$ru:: entering failure_route[1]\n");

  if (t_was_cancelled()) {
    xlog("L_INFO", "C5 : Transaction was cancelled, stopping mediaproxy\n");
    end_media_session();
    exit;
  }

  if (isbflagset(1)) {
    xlog("L_INFO", "C5 : UAC unavailable\n");
    t_reply("480", "Temporary Unavailable");
    exit;
  }

  if (t_check_status("(408)|(5[0-9][0-9])")) {
    if(goes_to_gw("1")) {
      xlog("L_NOTICE", "C5::$avp(nat)::$si:$sp::$avp(account_code)::$rm::would have disable gw");
      #dr_disable();
      #if(!exec_msg("/opt/local/bin/report_gw_disabled.sh '$ru' '$T_reply_code' C5")) {
      #  xlog("L_WARNING", "C5 : report gw disabled : NOK");
      #} else {
      #  xlog("L_INFO", "C5 : report gw disabled : OK");
      #}
    }

    $avp(old_ru)=$rU;
    if (use_next_gw()) {
      t_on_failure("1");
      $rU=$avp(old_ru);
      if (!t_relay()) {
        xlog("L_ERR", "C5 : t_relay failed checking next gateway\n");
        exit;
      }
      xlog("L_NOTICE", "C5::$avp(nat)::$si:$sp::$avp(account_code)::$rm::xxx::$ru");
    } else {
      xlog("L_ERR", "C5::$avp(nat)::$si:$sp::$avp(account_code)::$rm::drouting failover failed or no more active gws.");
      t_reply ("503", "Service not available");
      exit;
    }
  } else { # status != (408)|(5[0-9][0-9])
    exit;
  }
}
