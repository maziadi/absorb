#!/usr/bin/env ruby

require 'cmdparse2'
require 'vmprov'

cmd = CmdParse::CommandParser.new(true,true)
cmd.program_name = "vmprov"
cmd.program_version = [0, 0, 1]
cmd.add_command( CmdParse::HelpCommand.new, true )
cmd.add_command( CmdParse::VersionCommand.new )
cmd.options = CmdParse::OptionParserWrapper.new do |opt|
  opt.separator "Global options:"
  opt.on( '-h', '--hostname <HOSTNAME>','Specify hostname of the virtual machine' ) { |hostname| $hostname = hostname }
end

##################################################################
# DRBD
##################################################################
drbd = CmdParse::Command.new('drbd', true )
drbd.short_desc = "Manage DRBD"

# add drbd volume
drbd_add = CmdParse::Command.new('add', false )
drbd_add.short_desc = "Add a new DRBD volume"
drbd_add.options = CmdParse::OptionParserWrapper.new do |opt|
  opt.separator "add options:"
  opt.on( '-s', '--size <SIZE>', 'Specify volume size (ex 20G)') { |size| $drbd_size = size }
  opt.on( '-m', '--hostm <HOSTNAME:IPADDR>', 'Specify first host') { |h1| $drbd_host1 = h1 }
  opt.on( '-n', '--hostn <HOSTNAME:IPADDR>', 'Specify second host') { |h2| $drbd_host2 = h2 }
end

drbd_add.set_execution_block do |args|
  raise "Arguments are mandatory" if $drbd_size.nil? or $hostname.nil? or $drbd_host1.nil? or $drbd_host2.nil?
  drbd_volume = Drbd::new($hostname, $drbd_size, [$drbd_host1, $drbd_host2])
  drbd_volume.create
end

# init drbd volume
drbd_init = CmdParse::Command.new('init', false )
drbd_init.short_desc = "Initialize a DRBD volume"
drbd_init.options = CmdParse::OptionParserWrapper.new do |opt|
  opt.separator "init options:"
end

drbd_init.set_execution_block do |args|
  drbd_volume = Drbd::init($hostname)
end

# reset drbd volume to be ready with pacemaker
drbd_reset = CmdParse::Command.new('reset', false )
drbd_reset.short_desc = "reset a DRBD volume"
drbd_reset.options = CmdParse::OptionParserWrapper.new do |opt|
  opt.separator "reset options:"
end

drbd_reset.set_execution_block do |args|
  drbd_volume = Drbd::reset($hostname)
end


# del drbd volume
drbd_del = CmdParse::Command.new('delete', false )
drbd_del.short_desc = "Delete a DRBD volume"
drbd_del.options = CmdParse::OptionParserWrapper.new do |opt|
  opt.separator "delete options:"
  opt.on( '--keeplv', 'Don\'t destroy logical volume') { $drbd_keeplv = true }
end

drbd_del.set_execution_block do |args|
  raise "Arguments are mandatory" if $hostname.nil?
  drbd_volume = Drbd::delete($hostname, $drbd_keeplv)
end

# list drbd volumes
drbd_list = CmdParse::Command.new('list', false )
drbd_list.short_desc = "List DRBD volumes"
drbd_list.options = CmdParse::OptionParserWrapper.new do |opt|
  opt.separator "list options:"
  opt.on( '--short', 'Short output') { $drbd_short = true }
end

drbd_list.set_execution_block do |args|
  begin
    drbd_volume = Drbd::list($drbd_short)
  rescue
    puts "An error occured when retrieving drbd volumes"
  end
end


##################################################################
# Libvirt
##################################################################
libvirt = CmdParse::Command.new('vm', true )
libvirt.short_desc = "Manage Libvirt configuration"

# add vm conf in libvirt
libvirt_add = CmdParse::Command.new('add', false )
libvirt_add.short_desc = "Add a new Libvirt VM config"
libvirt_add.options = CmdParse::OptionParserWrapper.new do |opt|
  opt.separator "add options:"
  opt.on('-b', '--bridge <BRIDGE>', 'Specify bridge to use') { |bridge| $bridges << bridge }
  opt.on('-c', '--cpu <NUMBER>', 'Specify number of cpu to use') { |cpu| $cpu = cpu }
  opt.on('-m', '--memory <MEM_SIZE>', 'Specify memory size') { |mem| $memory_size = mem }
  opt.on('--hda', 'Use hda for disk target (for Windows or GNU/Hurd)') { $hda = true }
end

$bridges = []
$cpu = 1 if $cpu.nil?
$memory_size = "512M" if $memory_size.nil?

libvirt_add.set_execution_block do |args|
  raise "Arguments are mandatory" if $hostname.nil? or $bridges.empty?
  vm = Libvirt::new($hostname, $cpu, $bridges, $memory_size, $hda)
  vm.create_config
end

# prov vm in pacemaker
libvirt_prov = CmdParse::Command.new('prov', false )
libvirt_prov.short_desc = "provision a vm in pacemaker"
libvirt_prov.options = CmdParse::OptionParserWrapper.new do |opt|
  opt.separator "prov options:"
  opt.on('-p', '--preferrede <HOSTNAME>', 'Specify preferred host for the vm') { |host| $phost = host }
end

libvirt_prov.set_execution_block do |args|
  raise "Arguments are mandatory" if $hostname.nil? or $phost.nil?
  Libvirt::prov_cluster($hostname, $phost)
end

# del vm conf in libvirt
libvirt_del = CmdParse::Command.new('delete', false )
libvirt_del.short_desc = "Delete a libvirt configuration"
libvirt_del.options = CmdParse::OptionParserWrapper.new do |opt|
  opt.separator "delete options:"
end

libvirt_del.set_execution_block do |args|
  raise "Arguments are mandatory" if $hostname.nil?
  Libvirt::delete($hostname)
end

##################################################################


# DRBD
cmd.add_command(drbd)
drbd.add_command(drbd_add)
drbd.add_command(drbd_init)
drbd.add_command(drbd_reset)
drbd.add_command(drbd_del)
drbd.add_command(drbd_list, true)
# Libvirt
cmd.add_command(libvirt)
libvirt.add_command(libvirt_add)
libvirt.add_command(libvirt_del)
libvirt.add_command(libvirt_prov)

cmd.parse
