#!/usr/bin/ruby

COW_DIR="/live/cow"

require 'fileutils'
require 'cmdparse2'
require 'lisos'
require 'yaml'

$module=get_cmdline("module")
$root="/live/cow"
$persistent=true
$dryrun=false


if File::file?("/etc/lisos-snapshots.yaml")
  config = YAML::load(File::new("/etc/lisos-snapshots.yaml"))
else
  config = {}
end



# si l'option est définie dans le fichier alors elle prend le pas sur les valeurs par défaut
# on fait attention a toujours avoir un tableau (l'option peut être défini sans rien)
$config_includes = config.include?("config_includes")? (config["config_includes"] || [] ) : \
                  %w(/etc /root/.ssh/authorized_keys /usr/share/snmp/snmpd.conf /var/lib/snmp/snmpd.conf)
$config_excludes = config.include?("config_excludes")? (config["config_excludes"] || [] ) : \
                  %w(/etc/rsyslog.d/fifo.conf)
$config_excludes << "/etc/lisos_version" #make sure lisos_version is excludes

$filesystem_includes = config.include?("filesystem_includes")? (config["filesystem_includes"] || [] ) : \
                       %w(/bin /lib /opt /sbin /usr /var)
$filesystem_excludes = config.include?("filesystem_excludes")? (config["filesystem_excludes"] || [] ) : \
                       %w(/var/run /var/tmp /var/lock /var/log /usr/share/snmp/snmpd.conf /var/lib/snmp/snmpd.conf)

$new_includes=Array::new
$new_excludes=Array::new

$config_name="live-config.cpio.gz"
$filesystem_name="live-filesystem.cpio.gz"

def explore(array)
  result = array.collect{ |value|
    if File::directory?(value)
      res = Dir.glob(".#{value}/**/*").concat(Dir.glob(".#{value}/**/.[^.]*"))
      res.concat([".#{value}"]) if File::directory?(".#{value}")
    else
      Dir.glob(".#{value}")
    end
  }
  return result.flatten
end


def create_snapshot(name,root,includes,excludes)
  begin
    if $persistent
      $file="#{PERSISTENT_MOUNT}/#{$module}/#{name}"
      mountPersistent()
    else
      Dir.chdir("#{$dir}"){
        $file="#{Dir.pwd}/#{name}"
      }
    end

    Dir.chdir("#{root}") do
      listfiles = explore(includes) - explore(excludes)
      if $dryrun
        listfiles.collect! {|value| value=value[1..value.length] } #just for the display we remove the "."
        puts "File to save : \n#{listfiles.join("\n")}"
      else
        system "printf \"#{listfiles.join("\n")}\" | cpio -H newc -o | gzip -9c > #{$file}"
      end
    end
  ensure
    umountPersistent() if $persistent
  end
end


def show_file(name)
  begin
    if $persistent
      $file="#{PERSISTENT_MOUNT}/#{$module}/#{name}"
      mountPersistent()
    else
      $file="#{$dir}/#{name}"
    end
    if File.file?($file)
      system "zcat #{$file} | cpio -t"
    else
      puts "No snapshot"
    end
  ensure
    umountPersistent() if $persistent
  end
end

def create_diff(name,root,includes,excludes)
  begin
    if $persistent
      $file="#{PERSISTENT_MOUNT}/#{$module}/#{name}"
      mountPersistent()
    else
      Dir.chdir("#{$dir}"){
        $file="#{Dir.pwd}/#{name}"
      }
    end

    Dir.chdir("#{root}") do

      listfiles = explore(includes) - explore(excludes)
      listfiles.collect! { |item| item[2..item.length] }
      listcpiofiles = Array::new
      listcpiofiles = `zcat #{$file} | cpio --quiet -i -t`.split("\n") if File::file?($file)

      newfiles = listfiles - listcpiofiles
      deletefiles = listcpiofiles - listfiles
      if newfiles.size == 0
        puts "No new files in snapshot"
      else
        puts "New files in snapshot: \n\t#{newfiles.join("\n\t")}"
      end
      if deletefiles.size == 0
        puts "No removed files in snapshot"
      else
        puts "Removed files in snapshot: \n\t#{deletefiles.join("\n\t")}"
      end
      puts "####### Diff between cow and snapshot #######"
      listfiles.each{ |item|
        if File::file?(item)
          diff=`diff -U 0 --to-file #{item} - <<EOF
$(zcat #{$file} | cpio -i --quiet --to-stdout #{item})
EOF`
          puts "#{diff}" 
        end
      }
    end
  ensure
    umountPersistent() if $persistent
  end
end


cmd = CmdParse::CommandParser.new(true,true)

cmd.program_name = "lisos-snapshots "

cmd.add_command(CmdParse::HelpCommand::new, true)

cmd.options = CmdParse::OptionParserWrapper::new do |opt|
  opt.on('-r','--root DIRECTORY',"directory where we take snapshot (default: #{$root})"){ |name|
    $root=name
  }
  opt.on('-s','--save DIR',"save snapshot in a custom directory"){ |dir|
    $dir=dir
    $persistent=false
  }
  opt.on('-o','--old',"force to take the old snapshot (not working with -s)") { $module="old" }
  opt.on('-c','--current',"force to take the current snapshot (not working with -s)") { $module="current" }
  opt.on('-d','--dryrun',"dryrun mode (do no perform the snapshot, just list the file)") { $dryrun=true }
  opt.on('-I','--includes FILE,FILE',"include custom file in the snapshot"){ |files|
    $new_includes=files.split(",")
  }
  opt.on('-E','--excludes FILE,FILE',"exclude custom file in the snapshot"){ |files|
    $new_excludes=files.split(",")
  }
end

config = CmdParse::Command.new( 'config', false )
config.short_desc = "create snapshot of the config "
config.description = "create snapshot of the config"
config.set_execution_block do |args|
  includes=$config_includes + $new_includes
  excludes=$config_excludes + $new_excludes
  create_snapshot($config_name,$root,includes,excludes)
end


filesystem = CmdParse::Command.new( 'filesystem', false )
filesystem.short_desc = "create snapshot of the filesytem"
filesystem.description = "create snapshot of the filesystem"
filesystem.set_execution_block do |args|
  includes=$filesystem_includes + $new_includes
  excludes=$filesystem_excludes + $new_excludes
  create_snapshot($filesystem_name,$root,includes,excludes)
end


diff = CmdParse::Command.new( 'diff', true )
diff.short_desc = "Make a diff between current file and snapshot"
diff.description = "Make a diff between current file and snapshot, you need to specify config or filesystem "

dfilesystem = CmdParse::Command.new( 'filesystem', false )
dfilesystem.short_desc = "diff between current file in cow for filesystem snapshot and the snapshot"
dfilesystem.description = "diff between current file in cow for filesystem snapshot and the snapshot"
dfilesystem.set_execution_block do |args|
  includes=$filesystem_includes + $new_includes
  excludes=$filesystem_excludes + $new_excludes
  create_diff($filesystem_name,$root,includes,excludes)
end


dconfig = CmdParse::Command.new( 'config', false )
dconfig.short_desc = "diff between current file in cow for filesystem snapshot and the snapshot"
dconfig.description = "diff between current file in cow for filesystem snapshot and the snapshot"
dconfig.set_execution_block do |args|
  includes=$config_includes + $new_includes
  excludes=$config_excludes + $new_excludes
  create_diff($config_name,$root,includes,excludes)
end

show = CmdParse::Command.new( 'show', true )
show.short_desc="Show files in a snapshot"
show.description = "Show files in a snapshost"

sconfig = CmdParse::Command.new( 'config',false)
sconfig.short_desc = "Show files in config snapshot"
sconfig.description = "Show files in config snapshot"
sconfig.set_execution_block do |args|
  show_file($config_name)
end

sfile = CmdParse::Command.new( 'filesystem',false)
sfile.short_desc = "Show files in filesystem snapshot"
sfile.description = "Show files in filesystem snapshot"
sfile.set_execution_block do |args|
  show_file($filesystem_name)
end

cmd.add_command(config)
cmd.add_command(filesystem)

show.add_command(sconfig)
show.add_command(sfile)

cmd.add_command(show)

cmd.add_command(diff)
diff.add_command(dconfig)
diff.add_command(dfilesystem)

cmd.parse


