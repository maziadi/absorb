#!/usr/bin/env ruby

require 'syslog'
Syslog.open("monitor_gw_stats")

require 'bundler'
ENV["BUNDLE_PATH"] = "/usr/lib/ruby/1.8/voip-tools/bundle"
ENV["BUNDLE_DISABLE_SHARED_GEMS"] = "1"
ENV["BUNDLE_GEMFILE"] = "/usr/lib/ruby/1.8/voip-tools/Gemfile"
Bundler.setup

require 'sequel'
require 'time'
require 'net/smtp'

CONF = '/etc/voip-tools.yaml'
YAML_CONF = YAML.load(File.read(CONF))
DATABASE_INFOS = YAML_CONF[:database]
$db = Sequel.connect(DATABASE_INFOS)
VNOUsedAsReference = YAML_CONF[:vno_used_as_reference]

def update_or_create_status(address, status)
  last_status = $db[:gateways_status].filter(:address => address)
  if last_status.count >= 1
    last_status.update(:previous_status => last_status.first[:status], :last_modified => Time.now.iso8601, :status => status)
    { address => last_status.first }
  else
    $db[:gateways_status].insert(:address => address, :status => status)
    {}
  end
end

def get_old_status(address)
  gateways_status = $db[:gateways_status].filter(:address => address)
  gateways_status.count >= 1 ? gateways_status.first[:status] : nil
end

def list_new_status
  opensips_status = `/opt/local/bin/#{VNOUsedAsReference}_opensipsctl fifo dr_gw_status`.scan(/IP=([^ ]*) Enabled=([^\n]*)\n/)
  gws = $db["#{VNOUsedAsReference}_dr_gw".to_sym].filter(:probe_mode => 2).select(:address).map {|g| g[:address]}
  opensips_status.select {|k,v| gws.include?(k) }
end

def send_mail(new_status)
  gws_msg = []
  new_status.each do |gw, gw_status|
    gws_msg << "#{gw} switched to #{gw_status[:status]} and was #{gw_status[:previous_status]} since #{gw_status[:last_modified]}"
  end
  environment = File.read('/etc/puppet/puppet.conf').scan(/environment \= (\w+)/).first.first
  to = environment == 'production' ? 'noc-alerts@alphalink.fr' : 'dev-noc-alerts@alphalink.fr'
  hostname = `hostname`.strip
  from = "root@#{hostname}"
  msg = "From: <#{from}>
To: <#{to}>
Subject: PCSCF alert -- Gateways status changed
Changes happened in #{hostname}'s opensips gateways:

#{gws_msg.join("\n")}
  "
  Net::SMTP.start('mail.admin.alphalink.fr', 25) do |smtp|
    smtp.send_message(msg, from, to)
  end
end

new_status = {}
list_new_status.each do |address, status|
  db_status = (status.strip == 'no' ? 'down' : 'up')
  old_status = get_old_status(address)
  unless db_status == old_status
    new_status.merge!(update_or_create_status(address, db_status))
  end
end
send_mail(new_status) if new_status.size > 0
