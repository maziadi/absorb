#!/usr/bin/env ruby
require 'pcap'
require 'pp'
STDOUT.sync = true
Thread.abort_on_exception = true

Basename = File.basename($0)
PID_filename = "/var/run/#{Basename}.pid"
Log_path = '/var/log/'
Log_base_filename = 'agents_requests_process_time.log'
Request_types = [
  'EMDB',
  'EXDB',
  'LIDB',
  'NPDB',
]

def open_logfile
  log_filename = "#{Log_path}#{Log_base_filename}"
  if File.exists?(log_filename) and File.mtime(log_filename).day == Time.new.day
    @logfile_io = File.open(log_filename,'a')
  else
    rotate_logfiles if File.exists?(log_filename)
    @logfile_io = File.open(log_filename,'w')
    @logfile_io.print 'time'
    Request_types.each do |type|
      ['processed','min','mean','med','max'].each do |sensor|
        @logfile_io.print ";#{type}_#{sensor}"
      end
    end
    @logfile_io.puts
    @logfile_io.flush
  end
  @logfile_io.sync = true
end

def rotate_logfiles
  @logfile_io.close if @logfile_io and not @logfile_io.closed?
  existing_log_files = Dir.glob("#{Log_path}#{Log_base_filename}*").sort do |a,b|
    a_index = a[/#{Log_base_filename}\.(\d+)/,1].to_i rescue 0
    b_index = b[/#{Log_base_filename}\.(\d+)/,1].to_i rescue 0
    b_index <=> a_index
  end
  File.delete(existing_log_files.shift) if existing_log_files.length > 14
  existing_log_files.each do |filename|
    if index = filename[/#{Log_base_filename}\.(\d+)/,1]
      File.rename(filename, "#{Log_path}#{Log_base_filename}.#{index.to_i + 1}")
    else
      File.rename(filename, "#{Log_path}#{Log_base_filename}.1")
    end
  end
  open_logfile
end

@values = {}
Request_types.each do |type|
  @values[type] = {:in_flight => 0, :latencies => []}
end

@current_day = Time.new.day

if File.exists?(PID_filename)
  pid = File.read(PID_filename).to_i
  cmdline = File.read("/proc/#{pid}/cmdline") rescue ''
  abort "#{Basename} is already running (PID #{pid})!" if cmdline.include? Basename
end

File.open(PID_filename,'w') {|fio| fio.write Process.pid}
trap('INT') { STDERR.puts 'Interrupt!'; File.delete(PID_filename); exit}

open_logfile

Thread.new do
  loop do
    sleep 60
    puts '---'
    Thread.critical = true
      now = Time.new
      values = Marshal.load(Marshal.dump(@values))
      @values.each { |type,type_hash| type_hash[:latencies].clear }
    Thread.critical = false
    log_output = now.to_i.to_s
    Request_types.each do |type|
      processed = values[type][:latencies].length
      if processed > 0
        values[type][:latencies].sort!
        min  = values[type][:latencies].first
        mean = values[type][:latencies].inject(:+) / processed
        med  = values[type][:latencies][processed/2]
        max  = values[type][:latencies].last
      else
        min  = 0.0
        mean = 0.0
        med  = 0.0
        max  = 0.0
      end

      log_output << ";#{processed};#{min};#{mean};#{med};#{max}"
      puts "%s  %s: %5d processed, %3d processing\tmin: %9.3f ms\tmean: %9.3f ms\tmed: %9.3f ms\tmax: %9.3f ms\n" % [
        now, type, processed, values[type][:in_flight], min, mean, med, max]
    end
    (rotate_logfiles; @current_day = now.day) if @current_day != now.day
    @logfile_io.puts log_output
  end
end

message_ids = {}
Request_types.each {|type| message_ids[type] = {}}

interface = ['bond0.710', 'bond0.720'].find{|ifname| Pcap::lookupnet(ifname) rescue nil}
cap = Pcap::Capture.open_live(interface, 65535, false, 500)
filter = Pcap::Filter.new("greater 200 and not net 169.254.64.0/24 and tcp and tcp port 61616", cap)
cap.setfilter(filter)

cap.each do |packet|
  next unless message_id = packet.tcp_data[20..-1][/\000{5}\x10(\w+)/,1]
  message_type = packet.tcp_data[20..-1][/messageType...([A-Z]+)/,1]
  unless Request_types.include?(message_type)
    puts "No or unknown message_type (#{message_type.inspect})"
    next
  end
  if packet.dport == 61616
    message_ids[message_type][message_id] = packet.time
    @values[message_type][:in_flight] += 1
  else
    if message_ids[message_type].has_key?(message_id)
      @values[message_type][:latencies] << (packet.time - message_ids[message_type][message_id]) * 1000
      @values[message_type][:in_flight] -= 1
      message_ids[message_type].delete(message_id)
    else
      puts "No matching request for message #{message_id}, #{packet.time.strftime('%Y/%m/%d %H:%M:%S')}.#{((packet.time.to_f % 1) * 1000000).to_i}"
      pp cap.stats
    end
  end
end
